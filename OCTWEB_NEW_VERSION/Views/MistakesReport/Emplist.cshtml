@model OCTWEB_NET45.Models.SearchMistModel
@using PagedList.Mvc
@{
    ViewBag.Title = "Emplist";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container-fluid">
    @using (Html.BeginForm("EmpList", "MistakesReport", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "Form1" }))
    {
        <div class="form-row">
            <div class="col">
                <h4 class="page-title ">Mistakes List <span style="color:green;">Report</span></h4>
                <p class="text-success">@ViewBag.Message</p>
                @Html.ValidationSummary(true)
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <fieldset>
                    <legend>Enter condition for search mistakes data</legend>
                    <div class="form-row justify-content-center">
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="mb-0">Emp Id: </label>
                                @Html.TextBoxFor(m => m.emp_id, new { @class = "form-control form-control-sm", style = "width:100%" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="mb-0">First Name: </label>
                                @Html.TextBoxFor(m => m.fname, new { @class = "form-control form-control-sm", style = "width:100%" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="mb-0">Last Name: </label>
                                @Html.TextBoxFor(m => m.lname, new { @class = "form-control form-control-sm", style = "width:100%" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="mb-0">Nick Name: </label>
                                @Html.TextBoxFor(m => m.nickname, new { @class = "form-control form-control-sm", style = "width:100%" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="mb-0">Cost Center: </label>
                                @Html.DropDownList("costcenter_code", Model.SelectCostCenter, "All", new { style = "width:100%", @class = "form-control form-control-sm" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="mb-0">Position: </label>
                                @Html.DropDownList("position", Model.SelectPosition, "All", new { style = "width:100%", @class = "form-control form-control-sm" })
                            </div>
                        </div>
                    </div>
                    <div class="form-row justify-content-center">
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class="mb-0">Department: </label>
                                @Html.DropDownList("deptcode", Model.SelectDepartment, "All", new { style = "width:100%", @class = "form-control form-control-sm" , @readonly = "readonly", disabled = "disabled" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @{
                                    string startdate_str = null;
                                }
                                @if (Model.start_date.HasValue)
                                {
                                    startdate_str = Model.start_date.Value.ToString("yyyy-MM-dd");
                                }
                                <label class="mb-0">Start Date: </label>
                                <input type="date" name="start_date" class="form-control form-control-sm date" value="@startdate_str" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @{
                                    string enddate_str = null;
                                }
                                @if (Model.end_date.HasValue)
                                {
                                    enddate_str = Model.end_date.Value.ToString("yyyy-MM-dd");
                                }
                                <label class="mb-0">End Date </label>
                                <input type="date" name="end_date" class="form-control form-control-sm date" value="@enddate_str" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="mb-0">Reason wrongdoing: </label>
                                @Html.DropDownList("reason_str", Model.SelectReason, "All", new { style = "width:100%", @class = "form-control form-control-sm" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="mb-0">level of warning: </label>
                                @Html.DropDownList("levelwarning_id", Model.SelectLevalWarning, "All", new { style = "width:100%", @class = "form-control form-control-sm" })
                            </div>
                        </div>
                    </div>
                    <div class="form-row justify-content-center">
                        <div class="col-md-8">
                            <div class="form-group">

                                <button type="button" id="ExportToCsvBtn" class="btn btn-sm btn-outline-primary">
                                    <i class="fa fa-file" aria-hidden="true"></i> Export
                                </button>
                                <input hidden="hidden" id="ExportToCsv" name="ExportToCsv" value="null" />

                                <button id="clear" type="button" name="clear" class="btn btn-sm btn-outline-dark">
                                    <i class="fa fa-eraser" aria-hidden="true"></i> Clear
                                </button>

                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="mb-0"> </label>
                                <button type="submit" name="Search" class="btn btn-sm btn-success" value="Search">
                                    <i class="fa fa-search" aria-hidden="true"></i> Search
                                </button>
                            </div>
                        </div>
                    </div>
                </fieldset>
            </div>
        </div>
    }
</div>

<div class="container-fluid">
    @using (Html.BeginForm("Emplist", "MistakesReport", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "Form1" }))
    {
        <div class="form-row">
            <div class="col text-left">

            </div>
            <div class="col text-right">
                <div class="form-group">
                    <p>Number mistake all (จำนวนทั้งหมด):@Model.total</p>
                </div>
            </div>
        </div>
        <div class="form-row">
            <table class="tablecustom " id="table1" style="font-size:14px">
                <thead>
                    <tr>  
                        <th>
                            Items
                        </th>
                        <th>
                            Emp ID
                        </th>
                        <th>
                            Picture
                        </th>
                        <th>
                            Fist Name
                        </th>
                        <th>
                            Last Name
                        </th>
                        <th>
                            Nick Name
                        </th>
                        <th>
                            Department
                        </th>
                        <th>
                            Position
                        </th>
                        <th>
                            Cost Center
                        </th>
                        <th>
                            Details
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.EmpMistakesPagedList.Select((value, i) => new { i, value }))
                    {
                        <tr>
                            <td>
                                @((item.i + 1) + (30 * (Model.EmpMistakesPagedList.PageNumber - 1)))

                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.value.emp_id)
                            </td>
                            <td>
                                <img style="border:1px solid black;" src="@item.value.emp_profile" height="80" />
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.value.fname)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.value.lname)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.value.nickname)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.value.department)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.value.position)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.value.costcenter)
                            </td>
                            <td>
                                <a href="@Url.Action(actionName: "Detail"
                                    , controllerName: "MistakesReport"
                                    , routeValues: new { id=@item.value.emp_id})" class="btn btn-sm btn-primary">
                                    <i class="fa fa-bars" aria-hidden="true"></i> Detail
                                </a>
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
        </div>
    }
    <div class="row justify-content-center">
        Page @(Model.EmpMistakesPagedList.PageCount < Model.EmpMistakesPagedList.PageNumber ? 0 : Model.EmpMistakesPagedList.PageNumber) of @Model.EmpMistakesPagedList.PageCount
    </div>
    <div class="row justify-content-center">
        @Html.PagedListPager(Model.EmpMistakesPagedList, page => Url.Action("EmpList", new RouteValueDictionary()
            {
                {"Page",page},
                {"emp_id",Model.emp_id},
                {"nickname",Model.nickname},
                {"fname",Model.fname},
                {"lname",Model.lname},
                {"position",Model.position},
                {"deptcode",Model.deptcode},
                {"costcenter_code",Model.costcenter_code},
                {"start_date",Model.start_date},
                {"end_date",Model.end_date},
                {"levelwarning_id",Model.levelwarning_id},
                {"reason_str",Model.reason_str},
            }))
    </div>
</div>

<script language="JavaScript">
    // Listen for click on toggle checkbox
    $('#select-all').click(function (event) {
        if (this.checked) {
            // Iterate each checkbox
            $(':checkbox').each(function () {
                this.checked = true;
            });
        } else {
            $(':checkbox').each(function () {
                this.checked = false;
            });
        }
    });

    $(document).on('select2:open', function (e) {
        const selectId = e.target.id;
        $(".select2-search__field[aria-controls='select2-" + selectId + "-results']").each(function (key, value) {
            value.focus();
        });
    });

    $(document).ready(function () {

        $("button[name='deleteall']").click(function () {
            return confirm('Delete all selected elements?');
        });
        /*
        $("#position").select2({
            placeholder: "All",
            allowClear: true,
            width: 'resolve'
        });
        $("#deptcode").select2({
            placeholder: "All",
            allowClear: true,
            width: 'resolve'
        });
        $("#costcenter_code").select2({
            placeholder: "All",
            allowClear: true,
            width: 'resolve'
        });
        $("#reason_str").select2({
            placeholder: "All",
            allowClear: true,
            width: 'resolve'
        });
        $("#levelwarning_id").select2({
            placeholder: "All",
            allowClear: true,
            width: 'resolve'
        });
        */
    });

    $("#ExportToCsvBtn").click(function () {
        $("#ExportToCsv").val("ExportToCsv");
        document.forms["Form1"].submit();
    })

    /*
    $("body").on("change", "#searchDepartmentId", function () {
        if ($('#searchDepartmentId').val())
        {
            $("#searchWorkingStandardTypeId").val("");
            $("#searchWorkingStandardProcessId").val("");
            $("#searchWorkingStandardName").val("");
            $("#searchWorkingStandardNo").val("");
            $("#submit_var").val("selected_department");
            document.forms["Form1"].submit();
        }
    }); */

    $("#clear").click(function () {
        $('#position').val(null).trigger('change');
        //$('#deptcode').val(null).trigger('change');
        $('#education').val(null).trigger('change');
        $('#costcenter_code').val(null).trigger('change');
        $('#levelwarning_id').val(null).trigger('change');

        $('#emp_id').val(null).trigger('change');
        $('#nickname').val(null).trigger('change');
        $('#fname').val(null).trigger('change');
        $('#lname').val(null).trigger('change');
        $('#reason_str').val(null).trigger('change');
        $("input[type=date]").val("");

    });


    $("#table1 tbody tr").click(function () {
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
        }
        else {
            $(this).addClass('selected');
        }
    });


    $(document).ready(function () {

        $("#emp_id").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/MistakesReport/GetEmpId",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    }
                })
            },
            messages: {
                noResults: 'No results found.',
                results: function (count) {
                    return count + (count > 1 ? ' results' : ' result ') + ' found';
                }
            },
        });

        $("#nickname").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/MistakesReport/GetNName",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    }
                })
            },
            messages: {
                noResults: 'No results found.',
                results: function (count) {
                    return count + (count > 1 ? ' results' : ' result ') + ' found';
                }
            },
        });

        $("#fname").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: " /MistakesReport/GetFName",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    }
                })
            },
            messages: {
                noResults: 'No results found.',
                results: function (count) {
                    return count + (count > 1 ? ' results' : ' result ') + ' found';
                }
            },
        });

        $("#lname").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: " /MistakesReport/GetLName",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    }
                })
            },
            messages: {
                noResults: 'No results found.',
                results: function (count) {
                    return count + (count > 1 ? ' results' : ' result ') + ' found';
                }
            },
        });


    })


</script>