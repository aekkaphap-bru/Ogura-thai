@section Styles {
    <link href="~/Content/oct-documentdetail.css" rel="stylesheet" />
}

@{
    ViewBag.Title = "Document Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model OCTWEB_NET45.Models.DocumentFormViewModel
@Html.AntiForgeryToken()
<div class="container-fluid py-4">
    <div class="main-container">
        <!-- Header Section -->
        <div class="header-section">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="mb-2">
                        <i class="fas fa-file-alt me-3"></i>
                        Document Request Detail
                    </h2>
                    <p class="mb-0 opacity-75">
                        <i class="fas fa-calendar me-2"></i>
                        Create Date: @Model.Created_at  | Requested By: @Model.Requester_name
                    </p>
                </div>
                <div class="col-md-4 text-end">
                    <span class="badge status-badge @GetStatusClass(Model.Status)">
                        <i class="@GetStatusIcon(Model.Status) me-1"></i>
                        @Model.Status
                    </span>

                    @functions {
                        private string GetStatusClass(string status)
                        {
                            if (string.IsNullOrEmpty(status)) return "bg-secondary text-white";

                            if (status.Contains("PENDING"))
                                return "bg-warning text-dark";
                            else if (status.Contains("REJECT"))
                                return "bg-danger text-white";
                            else if (status.Contains("COMPLETE"))
                                return "bg-success text-white";
                            else if (status.Contains("EDITING"))
                                return "bg-info text-white";
                            else
                                return "bg-secondary text-white";
                        }

                        private string GetStatusIcon(string status)
                        {
                            if (string.IsNullOrEmpty(status)) return "fas fa-question-circle";

                            if (status.Contains("PENDING"))
                                return "fas fa-clock";
                            else if (status.Contains("REJECT"))
                                return "fas fa-times-circle";
                            else if (status.Contains("COMPLETE"))
                                return "fas fa-check-circle";
                            else if (status.Contains("EDITING"))
                                return "fas fa-edit";
                            else
                                return "fas fa-question-circle";
                        }
                    }


                </div>
            </div>
        </div>

        <div class="p-4">
            <div class="row">
                <!-- Left Column - Document Details -->
                <div class="col-lg-8">
                    <!-- Request Information -->
                    <div class="info-card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                Request Information
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">

                                        <label class="form-label text-muted">Request Type</label>
                                        <div class="fw-bold">@Model.Request_type</div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Document Type</label>
                                        <div class="fw-bold">
                                            @Model.Document_type
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        @if (Model.Request_type != null && Model.Request_type.Contains("Obsolete"))
                                        {
                                            <label class="form-label text-muted">Obsolete Date</label>
                                        }
                                        else
                                        {
                                            <label class="form-label text-muted">Implementation Effective Date</label>
                                        }

                                        <div class="fw-bold">
                                            @Model.Effective_date.ToString("yyyy-MM-dd")
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Requested By</label>
                                        <div class="fw-bold">@Model.Requester_name</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Document Details -->
                    <div class="info-card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-file-alt me-2"></i>
                                Document Details
                            </h5>
                        </div>

                        <div class="card-body">
                            @foreach (var doc in Model.DocumentDetails)
                            {
                                <div class="document-item">
                                    <div class="row align-items-center">
                                        <div class="col-md-8">
                                            <h6 class="fw-bold text-primary mb-2">@doc.WS_number</h6>
                                            <p class="mb-2">@doc.WS_name</p>
                                            <div class="row">
                                                <div class="col-sm-4">
                                                    <small class="text-muted">Revision:</small>
                                                    <div class="fw-bold">@doc.Revision</div>
                                                </div>
                                                <div class="col-sm-4">
                                                    <small class="text-muted">Total Page/Set:</small>
                                                    <div class="fw-bold">@doc.Num_pages</div>
                                                </div>
                                                <div class="col-sm-4">
                                                    <small class="text-muted">Copy of Set:</small>
                                                    <div class="fw-bold">@doc.Num_copies</div>
                                                </div>
                                            </div>
                                            <div class="mt-2">
                                                <small class="text-muted">Details of Change / Request:</small>
                                                <div>@doc.Change_detail</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 text-end">
                                            <div class="mb-2">
                                                <a href="@Url.Action("Previewfile", "Document", new { file = doc.File_pdf })" class="file-download-pdf  me-2">
                                                    <i class="fas fa-file-pdf me-1"></i>PDF
                                                </a>
                                            </div>
                                            <div>
                                                <a href="@Url.Action("Previewfile", "Document", new { file = doc.File_excel })" class="file-download-excel me-2">
                                                    <i class="fas fa-file-excel me-1"></i>Excel
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>

                    <!-- Area Usage -->
                    <div class="info-card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-map-marker-alt me-2"></i>
                                Area of Usage
                            </h5>
                        </div>

                        <div class="card-body">
                            @foreach (var area in Model.AvailableAreas)
                            {
                                <span class="area-badge">@area.SectionName</span>
                            }
                        </div>
                    </div>

                    <div class="mt-5 text-center d-flex justify-content-center flex-wrap gap-3"> 
                        <a href="@Url.Action("List", "Document")" class="btn btn-secondary btn-lg px-5 py-3">
                            <i class="fa-solid fa-rotate-left"></i> Back to List
                        </a>
                    </div>
                </div>

                <!-- Right Column - Approval Section -->
                <div class="col-lg-4">
                    @foreach (var step in Model.ApprovalSteps.OrderBy(s => s.Step))
                    {
                        var isPending = step.Status == "PENDING";
                        var isRejected = step.Status == "REJECTED";
                        var isApproved = step.Status == "APPROVED";
                        var isWaiting = step.Status == "WAITING";

                        // ตรวจสอบว่าผู้ใช้ปัจจุบันสามารถอนุมัติ step นี้ได้หรือไม่
                        var canApprove = isPending && step.Approver_id == Model.CurrentUserId;
                        var canApproveSetepFirst = isPending && Model.CurrentUserPosition;


                        <div class="approval-step @(isApproved ? "step-approved" : isRejected ? "step-rejected" : isPending ? "step-pending" : "step-waiting")">
                            <div class="step-icon">
                                @if (isApproved)
                                {
                                    <i class="fas fa-check text-success"></i>
                                }
                                else if (isRejected)
                                {
                                    <i class="fas fa-times text-danger"></i>
                                }
                                else if (isPending)
                                {
                                    <i class="fas fa-hourglass-half text-warning"></i>
                                }
                                else
                                {
                                    <i class="fas fa-pause text-secondary"></i>
                                }
                            </div>
                            <div class="step-content">
                                <h6 class="fw-bold mb-1">
                                    @step.StepName
                                </h6>
                                <div class="mb-2">
                                    @if (isApproved)
                                    {
                                        <span class="badge bg-success">Approved</span>
                                        if (step.Approved_at.HasValue)
                                        {
                                            <small class="text-muted d-block">@step.Approved_at.Value.ToString("dd/MM/yyyy HH:mm")</small>
                                        }
                                    }
                                    else if (isRejected)
                                    {
                                        <span class="badge bg-danger">Rejected</span>
                                        if (step.Approved_at.HasValue)
                                        {
                                            <small class="text-muted d-block">@step.Approved_at.Value.ToString("dd/MM/yyyy HH:mm")</small>
                                        }
                                    }
                                    else if (isPending)
                                    {
                                        <span class="badge bg-warning text-dark">Pending approval</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Wait for the procedure</span>
                                    }
                                </div>

                                @if (!string.IsNullOrEmpty(step.Comment))
                                {
                                    <div class="comment-box my-2">
                                        <small class="text-muted">Comment:</small>
                                        <p class="mb-0">@step.Comment</p>
                                    </div>
                                }

                                @* Show approval form ONLY if user can approve this step *@
                                @if (step.Step == 1)
                                {


                                    if (canApproveSetepFirst)
                                    {
                                        <div class="approval-form mt-3" style="width:100%" id="approvalForm-@step.AId">
                                            <h6 class="text-primary mb-3">
                                                <i class="fas fa-edit me-2"></i>
                                                Approval
                                            </h6>
                                            <div class="form-floating mb-3">
                                                <textarea class="form-control" id="comments-@step.AId" placeholder="Comments" style="height: 100px"></textarea>
                                                <label for="comments-@step.AId">Comments</label>
                                            </div>
                                            <div class="d-grid d-md-flex justify-content-md-end">
                                                <button class="btn btn-reject btn-action me-md-2" onclick="handleApproval(@Model.Id, @step.AId, 'reject')">
                                                    <i class="fas fa-times me-2"></i>Reject
                                                </button>
                                                <button class="btn btn-approve btn-action" onclick="handleApproval(@Model.Id, @step.AId, 'approve')">
                                                    <i class="fas fa-check me-2"></i>Approval
                                                </button>
                                            </div>
                                        </div>

                                    }
                                    else if (isPending && step.Approver_id != Model.CurrentUserId)
                                    {
                                        <div class="mt-3">
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                Waiting for approval from @step.ApproverName
                                            </small>
                                        </div>
                                    }

                                }
                                else
                                {

                                    if (canApprove)
                                    {
                                        if (step.Step == 3)
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">Relevant Document Review</label>

                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" name="FMEA_Review" value="true" />
                                                    <label class="form-check-label">FMEA Review Required</label>
                                                </div>

                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" name="ControlPlan_Review" value="true" />
                                                    <label class="form-check-label">Control Plan Review Required</label>
                                                </div>

                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" name="ProcessFlow_Review" value="true" />
                                                    <label class="form-check-label">Process Flow Review Required</label>
                                                </div>
                                            </div>

                                        }

                                        <div class="form-floating mb-3">
                                            <textarea class="form-control" id="comments-@step.AId" placeholder="Comments" style="height: 100px"></textarea>
                                            <label for="comments-@step.AId">Comments</label>
                                        </div>

                                        <div class="d-grid d-md-flex justify-content-md-end">
                                            <button class="btn btn-reject btn-action me-md-2" onclick="handleApproval(@Model.Id, @step.AId, 'reject')">
                                                <i class="fas fa-times me-2"></i>Reject
                                            </button>
                                            <button class="btn btn-approve btn-action" onclick="handleApproval(@Model.Id, @step.AId, 'approve')">
                                                <i class="fas fa-check me-2"></i>Approve
                                            </button>
                                        </div>

                                    }
                                    else if (isPending && step.Approver_id != Model.CurrentUserId)
                                    {
                                        <div class="mt-3">
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                Waiting for approval from @step.ApproverName
                                            </small>
                                        </div>
                                    }
                                }
                            </div>
                        </div>


                    }
                    @if (Model.Status.Contains("COMPLETE"))
                    {
                        <!-- Quick Actions -->
                        <div class="info-card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="fas fa-tools me-2"></i>
                                    Actions
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-outline-success" onclick="exportPDF()">
                                        <i class="fas fa-file-pdf me-2"></i>Export as Excel
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    @if (Model.Status.Contains("REJECTED") || Model.Status.Contains("EDITING") && Model.CurrentUserId == Model.Requester_id)
                    {
                        <!-- Quick Actions -->
                        <div class="info-card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="fas fa-tools me-2"></i> Actions
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button type="button"
                                            class="btn btn-outline-warning btn-action btn-edit"
                                            data-id="@Model.Id">
                                        <i class="fas fa-edit me-2"></i> Edit Request
                                    </button>
                                </div>
                            </div>
                        </div>

                    }

                </div>
            </div>
        </div>


        <div id="loading-overlay" style="display:none">
            <div class="loading-box">
                <div class="spinner-border text-primary" role="status" style="width: 2.5rem; height: 2.5rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 fw-bold">Processing... Please Wait</p>
            </div>
        </div>
    </div>

    
</div>



<div class="modal fade" id="confirmationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-question-circle me-2"></i>
                    Confirm Operation
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmationMessage"></p>
                <button type="button" class="btn btn-primary" id="confirmButton">Confirm</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script>
    function handleApproval(documentId, stepAId, action) {
        const comment = $(`#comments-${stepAId}`).val().trim();

        function showLoadingOverlay(show) {
            const overlay = document.getElementById("loading-overlay");
            if (overlay) {
                overlay.style.display = show ? "flex" : "none";
            }
        }

        if (action === 'reject' && !comment) {
            Swal.fire({
                title: 'Reason Required',
                text: 'Please provide a comment for rejection.',
                icon: 'warning'
            });
            return;
        }

        const fmeaReview = $(`input[name="FMEA_Review"]`).is(':checked');
        const controlPlanReview = $(`input[name="ControlPlan_Review"]`).is(':checked');
        const processFlowReview = $(`input[name="ProcessFlow_Review"]`).is(':checked');

        Swal.fire({
            title: 'Confirm Operation?',
            text: `Do you want to ${action === 'approve' ? 'approve' : 'reject'} this document?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Confirm',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                showLoadingOverlay(true); // ✅ แสดง overlay เฉพาะเมื่อยืนยัน
                submitApprovalAjax({
                    DocumentId: documentId,
                    StepAId: stepAId,
                    Action: action,
                    Comment: comment,
                    FMEA_Review: fmeaReview,
                    ControlPlan_Review: controlPlanReview,
                    ProcessFlow_Review: processFlowReview
                });
            } else {
                showLoadingOverlay(false); // ✅ ซ่อนเมื่อกดยกเลิก
            }
        });
    }



    function submitApprovalAjax(data) {
        $.ajax({
            url: '@Url.Action("ProcessApproval", "Document")',
            type: 'POST',
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            // headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() }, // Removed as per original request
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: response.message,
                        icon: 'success'
                    }).then(() => {
                        if (response.redirectUrl) {
                            window.location.href = response.redirectUrl;
                        } else if (typeof Model !== 'undefined' && Model.Status === "COMPLETE") {
                            window.location.href = '@Url.Action("List", "Document")';
                        } else {
                            location.reload();
                        }
                    });

                    if (Notification.permission === "granted") {
                        new Notification("Document Approval", {
                            body: response.message,
                            icon: "/images/success-icon.png" // ไอคอนสำหรับแจ้งเตือน
                        });
                    } else if (Notification.permission !== "denied") {
                        Notification.requestPermission().then(permission => {
                            if (permission === "granted") {
                                new Notification("Document Approval", {
                                    body: response.message,
                                    icon: "/images/success-icon.png"
                                });
                            }
                        });
                    }


                } else {
                    Swal.fire({
                        title: 'Error',
                        text: response.message,
                        icon: 'error'
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error('AJAX error:', error);
                let errorMessage = 'An error occurred while submitting data to the server.';

                // Detailed error explanations
                if (xhr.status === 400) {
                    errorMessage = 'Bad Request: The server could not understand the request. This might be due to invalid data format or missing required fields.';
                } else if (xhr.status === 401) {
                    errorMessage = 'Unauthorized: Your session may have expired, or you do not have the necessary permissions to perform this action. Please log in again or contact support.';
                } else if (xhr.status === 403) {
                    errorMessage = 'Forbidden: You do not have permission to access this resource.';
                } else if (xhr.status === 404) {
                    errorMessage = 'Not Found: The requested URL was not found on the server. This typically means the `ProcessApproval` action or `Document` controller does not exist or the URL path is incorrect.';
                } else if (xhr.status === 500) {
                    errorMessage = 'Internal Server Error: An unexpected error occurred on the server. Please try again later. If the issue persists, contact support with details of your action.';
                } else if (status === 'timeout') {
                    errorMessage = 'Request Timeout: The server did not respond in time. This could be due to a slow network connection or a heavily loaded server.';
                } else if (status === 'abort') {
                    errorMessage = 'Request Aborted: The request was canceled, possibly by the browser or another script.';
                } else if (status === 'parsererror') {
                    errorMessage = 'JSON Parse Error: The server returned data that could not be parsed as JSON. This indicates a problem with the server\'s response format.';
                }

                Swal.fire({
                    title: 'Error',
                    text: errorMessage,
                    icon: 'error'
                });
            }
        });
    }

    function exportPDF() {
        const docId = @Model.Id;
        window.open(`/Document/ExportDarLog/${docId}`, '_blank');
    }


   // Delegated event for all .btn-action buttons inside a specific container
    $('#document-list-container, .info-card').on('click', '.btn-action', function (e) {
        const button = $(this);
        const id = button.data('id');
        const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

        if (button.hasClass('btn-edit')) {
            e.preventDefault();
            handleEditClick(id, antiForgeryToken);
        }
    });

    // Function: Check permission before allowing edit
    function handleEditClick(id, token) {
        $.ajax({
            url: '@Url.Action("CanEdit", "Document")',
            type: 'POST',
            data: { id: id, __RequestVerificationToken: token },
            success: function (res) {
                if (!res.success) {
                    Swal.fire("ไม่สามารถดำเนินการได้", res.message, "error");
                    return;
                }

                if (res.warningMessage) {
                    Swal.fire({
                        title: "โปรดยืนยัน",
                        text: res.warningMessage,
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "ดำเนินการต่อ",
                        cancelButtonText: "ยกเลิก"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = res.redirectUrl;
                        }
                    });
                } else {
                    window.location.href = res.redirectUrl;
                }
            },
            error: function () {
                Swal.fire("เกิดข้อผิดพลาด", "ไม่สามารถติดต่อเซิร์ฟเวอร์ได้", "error");
            }
        });
    }



</script>

<script src="~/Scripts/jquery.signalR-2.4.2.min.js"></script>
<script src="/signalr/hubs"></script>

