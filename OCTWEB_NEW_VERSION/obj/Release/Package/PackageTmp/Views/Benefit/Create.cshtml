@model OCTWEB_NET45.Models.BenefitRequestModel

@using (Html.BeginForm("Create", "Benefit", FormMethod.Post, new { enctype = "multipart/form-data", id = "benefitRequestForm" }))
{
    <div class="modal-header">
        <h5 class="modal-title">
            <i class="fas fa-file-medical me-2"></i> Benefit Request Form
        </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fas fa-times me-1" style="color: white;"></i></button>
        
        <!--
            ***If use bootstrap 5.3****
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-times me-1"></i> Cancel</button>
        -->
    </div>

    <div class="modal-body">
        <div class="row g-4">
            <div class="col-md-4">
                <div class="profile-image-container mb-3">
                    <img alt="Employee Profile" src="~/static/img/undraw_profile.svg" class="profile-image" id="employeeProfileImage">
                    <span class="status-badge">
                        <i class="fas fa-user"></i>
                    </span>
                </div>
            </div>

            <div class="col-md-8">
                <div class="row g-3">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EmpId, "Employee Id")
                        @Html.TextBoxFor(model => model.EmpId, new { @class = "form-control", placeholder = "Enter employeeId", id = "employeeId", maxLength = "4" })
                    </div>

                    <div class="col-md-6">
                        <label for="employeeName" class="form-label">Employee Name</label>
                        <input type="text" class="form-control" id="employeeName" readonly>
                    </div>

                    <div class="col-md-6">
                        <label for="employeeLastname" class="form-label">Employee Lastname</label>
                        <input type="text" class="form-control" id="employeeLastname" readonly>
                    </div>

                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Dep, "Employee Department")
                        @Html.TextBoxFor(model => model.Dep, new { @class = "form-control", id = "employeeDepartment", @ReadOnly = "readonly" })
                    </div>
                </div>
            </div>
        </div>

        <hr>

        <div class="row g-3 -3">
            <div class="col-md-6">
                @Html.LabelFor(model => model.TypeBenef, "BenefitType")
                @Html.DropDownListFor(model => model.TypeBenef,
                    new SelectList(new[] {
                        "คลอดบุตร", "แต่งงาน", "งานศพ"
                    }), "Enter benefit type", new { @class = "form-control", id = "typeBenefDropdown" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.Relation, "Relationship")
                <div class="d-flex align-items-center">
                    @Html.DropDownListFor(model => model.Relation,
                        new SelectList(new[] {
                            "บิดา", "มารดา", "สามี", "ภรรยา", "บุตร", "อื่นๆ"
                        }), "Enter relationship", new { @class = "form-control", placeholder = "Enter relationship", id = "relationDropdown" })
                    @Html.TextBoxFor(model => model.Relation, new { @class = "form-control ms-2", id = "relationship", placeholder = "Enter relationship", style = "display:none", maxLenght = 10 })
                </div>
            </div>

            <div class="col-md-6">
                <label class="form-label">Firstname</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        @Html.DropDownListFor(model => model.TRName,
                            new SelectList(new[] {
                                "เด็กหญิง", "เด็กชาย", "นางสาว", "นาง", "นาย"
                            }), "Enter Title", new { @class = "custom-select", id = "titleDropdown" })
                    </div>
                    @Html.TextBoxFor(model => model.FRName, new { @class = "form-control", placeholder = "Enter First Name", id = "FirstName", maxLength = 50 })
                </div>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.LRName, "Lastname")
                @Html.TextBoxFor(model => model.LRName, new { @class = "form-control", placeholder = "Enter Last Name", id = "LastName", maxLenght = 50 })
            </div>

            <div class="col-md-6">
                <label class="form-label">Salary Period</label>
                <div class="input-group">
                    @Html.DropDownListFor(model => model.Months,
                        new SelectList(new[]
                        {
                            "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน",
                            "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
                        }),
                        "Enter Month", new { @class = "form-control" })

                    @Html.DropDownListFor(model => model.Years,
                        new SelectList(Enumerable.Range(DateTime.Now.Year, 3).Select(y => y.ToString())),
                        "Enter Year", new { @class = "form-control" })
                </div>
            </div>

            <div class="col-6">
                <label for="documentUpload" class="form-label">Supporting Documents</label>
                <div class="custom-file-upload">
                    <input type="file" name="UploadedFiles" id="documentUpload" class="form-control form-control-sm" multiple>
                </div>
            </div>

        </div>

    </div>


    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" aria-label="Close"><i class="fa fa-times me-0"></i> Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBenefitRequest">
            <i class="fas fa-save me-1"></i> Submit Request
        </button>
    </div>
}


<script>
    $(document).ready(function() {
         // รับค่าตัวเลือกจาก Controller ผ่าน ViewBag
         const birthRelationOptions = @Html.Raw(Json.Encode(ViewBag.BirthRelationOptions));
         const marriageRelationOptions = @Html.Raw(Json.Encode(ViewBag.MarriageRelationOptions));
         const funeralRelationOptions = @Html.Raw(Json.Encode(ViewBag.FuneralRelationOptions));

         const birthTitleOptions = @Html.Raw(Json.Encode(ViewBag.BirthTitleOptions));
         const marriageTitleOptions = @Html.Raw(Json.Encode(ViewBag.MarriageTitleOptions));
         const funeralTitleOptions = @Html.Raw(Json.Encode(ViewBag.FuneralTitleOptions));

         // ฟังก์ชันสำหรับสร้างตัวเลือกใน dropdown
         function createOptionsHTML(options) {
             let html = '';
             for (let i = 0; i < options.length; i++) {
                 html += `<option value="${options[i].Value}">${options[i].Text}</option>`;
             }
             return html;
         }

        

        // ฟังก์ชันอัพเดทตัวเลือกใน dropdown ตามประเภทสวัสดิการ
        function updateRelationshipDropdowns() {
            const selectedType = $('#typeBenefDropdown').val();

            if (selectedType === 'คลอดบุตร') {
                $('#relationDropdown').html(createOptionsHTML(birthRelationOptions));
                $('#titleDropdown').html(createOptionsHTML(birthTitleOptions));
                $('#relationship').hide();
                $('#relationship').val('');
            }
            else if (selectedType === 'แต่งงาน') {
                $('#relationDropdown').html(createOptionsHTML(marriageRelationOptions));
                $('#titleDropdown').html(createOptionsHTML(marriageTitleOptions));
                $('#relationship').hide();
                $('#relationship').val('');
            }
            else if (selectedType === 'งานศพ') {
                $('#relationDropdown').html(createOptionsHTML(funeralRelationOptions));
                $('#titleDropdown').html(createOptionsHTML(funeralTitleOptions));
            } else {
                // กรณีไม่ได้เลือกประเภทสวัสดิการ
                $('#relationDropdown').html('<option value="">Enter relationship</option>');
                $('#titleDropdown').html('<option value="">Enter title name</option>');
            }

            // ตรวจสอบค่าปัจจุบันของ relationDropdown เพื่อแสดง/ซ่อนช่องป้อนข้อมูลอื่นๆ
            checkRelationOther();
        }

         // ฟังก์ชันตรวจสอบว่าเลือก "อื่นๆ" หรือไม่
         function checkRelationOther() {
             if ($('#relationDropdown').val() === "อื่นๆ") {
                 $('#relationship').val('');
                 $('#relationship').show();
             } else {
                 $('#relationship').hide();
                 $('#relationship').val($('#relationDropdown').val());
             }
         }

        // เรียกใช้เมื่อมีการเปลี่ยนประเภทสวัสดิการ
        $('#typeBenefDropdown').change(function () {
            updateRelationshipDropdowns();
        });

         // เรียกใช้เมื่อมีการเปลี่ยนความสัมพันธ์
         $('#relationDropdown').change(function() {
             checkRelationOther();
         });

         // เรียกใช้ครั้งแรกเมื่อโหลดหน้า
         updateRelationshipDropdowns();
     });

    $(document).ready(function () {
        $("#employeeId").on("input", function () {
            var empId = $(this).val().trim();
            if (empId.length > 0) {
                searchEmployee(empId);
            } else {
                clearEmployeeFields();
            }
        });

        //Autocomplete Employee Data
        function searchEmployee(empId) {
            $.ajax({
                url: '@Url.Action("GetEmployeeInfo", "Benefit")',
                type: "GET",
                data: { empId: empId },
                success: function (response) {
                    if (response) {
                        $("#employeeName").val(response.EmpName);
                        $("#employeeLastname").val(response.EmpLastname);
                        $("#employeeDepartment").val(response.Dep);

                        // แสดงรูปภาพพนักงาน
                        if (response.ImageExists) {
                            $("#employeeProfileImage").attr("src", response.ImagePath);
                            $(".status-badge").html('<i class="fas fa-check"></i>');
                        } else {
                            $("#employeeProfileImage").attr("src", "/static/img/undraw_profile.svg");
                            $(".status-badge").html('<i class="fas fa-times"></i>');
                        }

                        // เก็บข้อมูลเส้นทางรูปภาพไว้
                        $("#employeePic").val(response.ImagePath);
                    } else {
                        clearEmployeeFields();
                    }
                },
                error: function () {
                    console.log("Error retrieving employee data.");
                    clearEmployeeFields();
                }
            });
        }

        function clearEmployeeFields() {
            $("#employeeName").val("");
            $("#employeeLastname").val("");
            $("#employeeDepartment").val("");
            $("#employeeProfileImage").attr("src", "/static/img/undraw_profile.svg");
            $(".status-badge").html('<i class="fas fa-user-slash"></i>');
        }
    });

    $(document).ready(function () {
        $("#benefitRequestForm").submit(function (e) {
            e.preventDefault();

            if ($('#relationDropdown').val() === 'อื่นๆ') {
                var customRelation = $('#relationship').val().trim();
                if (customRelation !== '') {
                    $('#relationDropdown')
                        .append(`<option value="${customRelation}" selected>${customRelation}</option>`)
                        .val(customRelation);
                }
            }

            var formData = new FormData(this);

            $.ajax({
                url: '@Url.Action("Create", "Benefit")',
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: response.message,
                            showConfirmButton: false,
                            statusbar:true,
                            timer: 2000
                        }).then(() => {
                            $("#benefitRequestModal").modal("hide");
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: response.message
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something went wrong! ' + xhr.responseText
                    });
                }
            });
        });
    });

    function allowOnlyNumbers(selector) {
        $(selector).on("input keypress", function (e) {
            // ลบตัวอักษรที่ไม่ใช่ตัวเลข
            $(this).val($(this).val().replace(/[^0-9]/g, ""));

            // ป้องกันการพิมพ์ตัวอักษรที่ไม่ใช่ตัวเลข
            if (e.type === "keypress" && (e.which < 48 || e.which > 57)) {
                e.preventDefault();
            }
        });
    }

    function allowOnlyThai(selector) {
        $(selector).on("input keypress", function (e) {
            $(this).val($(this).val().replace(/[^ก-๙\(\)]/g, ""));
        });
    }

    $(document).ready(function () {
        allowOnlyNumbers("#employeeId");

        allowOnlyThai("#FirstName");
        allowOnlyThai("#LastName");
        allowOnlyThai("#relationship")
    });

    $('#benefitCreateModal').modal('hide'); 

</script>