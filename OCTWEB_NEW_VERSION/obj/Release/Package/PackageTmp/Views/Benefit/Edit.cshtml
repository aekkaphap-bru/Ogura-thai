@model OCTWEB_NET45.Models.BenefitRequestModel

@using (Html.BeginForm("Edit", "Benefit", FormMethod.Post, new { enctype = "multipart/form-data", id = "editBenefitForm" }))
{
    @Html.HiddenFor(m => m.Id)
    @Html.AntiForgeryToken()
<div class="modal-header">
    <h5 class="modal-title">
        <i class="fas fa-file-medical me-2"></i> Benefit Edit Form
    </h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fas fa-times me-1" style="color: white;"></i></button>
</div>
    <div class="form-actions">
        <!-- ปุ่ม Lock / Unlock -->
        <button type="button" class="btn btn-outline-secondary" id="toggleLockBtn">
            <i class="fas fa-lock" id="lockIcon"></i> <span id="lockText"> Lock</span>
        </button>

        <button type="button" class="btn btn-outline-danger ml-2" id="deleteBtn">
            <i class="fas fa-trash"></i> Delete
        </button>

    </div>
    <hr />

    <div class="modal-body">
        <div class="row g-4">

            <div class="profile-image-container mb-3">
                <img src="@Url.Action("GetEmployeeImage", "Benefit", new { empId = Model.EmpId })" alt="Employee Picture" class="profile-image" id="employeeProfileImage" />
                <span class="status-badge">
                    <i class="fas fa-user"></i>
                </span>
            </div>

            <div class="col-md-8 employee-info" data-lock="always">
                <div class="row g-3">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EmpId, "Employee Id")
                        @Html.TextBoxFor(model => model.EmpId, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.EmpName, "Employee Name")
                        @Html.TextBoxFor(model => model.EmpName, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.EmpLastname, "Employee Lastname")
                        @Html.TextBoxFor(model => model.EmpLastname, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Dep, "Employee Department")
                        @Html.TextBoxFor(model => model.Dep, new { @class = "form-control", id = "employeeDapartmen", @readonly = "readonly" })
                    </div>
                </div>
            </div>

        </div>
        <hr />


        <div class="row g-3" data-lock="Locks">
            <div class="col-md-6">
                @Html.LabelFor(model => model.TypeBenef, "BenefitType")
                @Html.DropDownListFor(model => model.TypeBenef, new SelectList(new[]
                    {
                        "คลอดบุตร", "แต่งงาน", "งานศพ"
                    }), "Enter benefit type", new { @class = "form-control" })
                @*@Html.TextBoxFor(model => model.TypeBenef)*@
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.Relation, "Relationship")
                <div class="d-flex align-items-center">
                    @*@Html.DropDownListFor(model => model.Relation,
                            new SelectList(new[] {
                                "บิดา", "มารดา", "สามี", "ภรรยา", "บุตร", "อื่นๆ"
                            }), "Enter relationship", new { @class = "form-control", placeholder = "Enter relationship", id = "relationDropdown" })*@
                    @Html.TextBoxFor(model => model.Relation, new { @class = "form-control ms-2", id = "Editrelationship", placeholder = "Enter relationship", maxLenght = 10 })
                </div>
            </div>
            <div class="col-md-6">
                <label class="form-label">Firstname</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        @Html.DropDownListFor(model => model.TRName,
                            new SelectList(new[] {
                                "เด็กหญิง", "เด็กชาย", "นางสาว", "นาง", "นาย"
                            }), "Enter Title", new { @class = "custom-select", id = "titleDropdown" })
                    </div>
                    @Html.TextBoxFor(model => model.FRName, new { @class = "form-control", placeholder = "Enter First Name", id = "FirstName", maxLength = 50 })
                </div>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.LRName, "Lastname")
                @Html.TextBoxFor(model => model.LRName, new { @class = "form-control", placeholder = "Enter Last Name", id = "LastName", maxLenght = 50 })
            </div>

            <div class="col-md-6">
                <label class="form-label">Salary Period</label>
                <div class="input-group">
                    @Html.DropDownListFor(model => model.Months,
                        new SelectList(new[]
                        {
                            "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน",
                            "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
                        }),
                        "Enter Month", new { @class = "form-control" })

                    @Html.DropDownListFor(model => model.Years,
                        new SelectList(Enumerable.Range(DateTime.Now.Year, 3).Select(y => y.ToString())),
                        "Enter Year", new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-6" id="supportingDocsContainer">
                <label for="documentUpload" class="form-label">แนบไฟล์ใหม่ (ถ้ามี)</label>
                <input type="file" name="UploadedFile" class="form-control" />
                @*<div class="custom-file-upload">
                        <label for="UploadedFile">แนบไฟล์ใหม่ (ถ้ามี):</label>
                        <input type="file" name="UploadedFile" class="form-control" />
                    </div>*@
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" aria-label="Close"><i class="fa fa-times me-0"></i> Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBenefitRequests" style="display:none">
            <i class="fas fa-save me-1"></i> Submit Request
        </button>
    </div>

}

<script>
    $(document).ready(function() {
        // รับค่าตัวเลือกจาก Controller ผ่าน ViewBag
        const birthRelationOptions = @Html.Raw(Json.Encode(ViewBag.BirthRelationOptions));
        const marriageRelationOptions = @Html.Raw(Json.Encode(ViewBag.MarriageRelationOptions));
        const funeralRelationOptions = @Html.Raw(Json.Encode(ViewBag.FuneralRelationOptions));

        const birthTitleOptions = @Html.Raw(Json.Encode(ViewBag.BirthTitleOptions));
        const marriageTitleOptions = @Html.Raw(Json.Encode(ViewBag.MarriageTitleOptions));
        const funeralTitleOptions = @Html.Raw(Json.Encode(ViewBag.FuneralTitleOptions));

        // ฟังก์ชันสำหรับสร้างตัวเลือกใน dropdown
        function createOptionsHTML(options) {
            let html = '';
            for (let i = 0; i < options.length; i++) {
                html += `<option value="${options[i].Value}">${options[i].Text}</option>`;
            }
            return html;
        }

        //// ฟังก์ชันอัพเดทตัวเลือกใน dropdown ตามประเภทสวัสดิการ
        //function updateRelationshipDropdowns() {
        //    const selectedType = $('#TypeBenef').val();

        //    if (selectedType === 'คลอดบุตร') {
        //        $('#relationDropdown').html(createOptionsHTML(birthRelationOptions));
        //        $('#titleDropdown').html(createOptionsHTML(birthTitleOptions));
        //        $('#relationship').hide();
        //        $('#relationship').val('');
        //    }
        //    else if (selectedType === 'แต่งงาน') {
        //        $('#relationDropdown').html(createOptionsHTML(marriageRelationOptions));
        //        $('#titleDropdown').html(createOptionsHTML(marriageTitleOptions));
        //        $('#relationship').hide();
        //        $('#relationship').val('');
        //    }
        //    else if (selectedType === 'งานศพ') {
        //        $('#relationDropdown').html(createOptionsHTML(funeralRelationOptions));
        //        $('#titleDropdown').html(createOptionsHTML(funeralTitleOptions));
        //    } else {
        //        $('#relationDropdown').html('<option value="">กรุณาเลือกความสัมพันธ์</option>');
        //        $('#titleDropdown').html('<option value="">กรุณาเลือกคำนำหน้า</option>');
        //    }

        //    // ตรวจสอบค่าปัจจุบันของ relationDropdown เพื่อแสดง/ซ่อนช่องป้อนข้อมูลอื่นๆ
        //    checkRelationOther();
        //}

        // ฟังก์ชันตรวจสอบว่าเลือก "อื่นๆ" หรือไม่
        function checkRelationOther() {
            if ($('#relationDropdown').val() === "อื่นๆ") {
                $('#relationship').show();
            } else {
                $('#relationship').hide();
                $('#relationship').val($('#relationDropdown').val());
            }
        }

        // เรียกใช้เมื่อมีการเปลี่ยนประเภทสวัสดิการ
        $('#TypeBenef').change(function() {
            updateRelationshipDropdowns();
        });

        // เรียกใช้เมื่อมีการเปลี่ยนความสัมพันธ์
        $('#relationDropdown').change(function() {
            checkRelationOther();
        });

        // เรียกใช้ครั้งแรกเมื่อโหลดหน้า
        updateRelationshipDropdowns();
    });

    function loadBenefitDetails(id) {
        $.ajax({
            url: '@Url.Action("Edit", "Benefit")',
            type: 'GET',
            data: { id: id },
            success: function (data) {
                $('#EmpId').val(data.EmpId);
                $('#employeeName').val(data.EmpName);
                $('#employeeLastname').val(data.EmpLastname);
                $('#employeeDapartmen').val(data.Dep);
                $('#TypeBenef').val(data.TypeBenef);
                $('#titleDropdown').val(data.TRName);
                $('#FirstName').val(data.FRName);
                $('#LastName').val(data.LRName);
                $('#Months').val(data.Months);
                $('#Years').val(data.Years);

                $('#Editrelationship').val(data.Relation)

                const relationList = ["บิดา", "มารดา", "สามี", "ภรรยา", "บุตร"];
                const relationValue = data.Relation;

                if (relationList.includes(relationValue)) {
                    $('#relationDropdown').val(relationValue).show();
                    $('#relationship').hide().val('');
                } else {
                    $('#relationDropdown').val("อื่นๆ").show();
                    $('#relationship').show().val(relationValue);
                }

                searchEmployeess();
            },

            error: function () {
                alert('เกิดข้อผิดพลาดในการดึงข้อมูล');
            }
        });
    }

    $(document).ready(function () {
        let isLocked = true;

        function toggleFormFields(lock) {
            const $form = $('form');

            $form.find('input, select, textarea').each(function () {
                const $input = $(this);
                const $parentContainer = $input.closest('[data-lock]');
                const isAlwaysLocked = $parentContainer.data('lock') === 'always';
                const detailLocked = $parentContainer.data('lock') === 'Locks';

                if (isAlwaysLocked) {
                    // Force lock
                    $input.prop('disabled', true);
                }

                if (detailLocked)
                 {
                    // Toggle based on lock state
                    $input.prop('disabled', lock);
                }
            });

            // แสดง/ซ่อนส่วนแนบไฟล์และปุ่ม Submit ตามสถานะ lock
            $('#supportingDocsContainer').css('display', lock ? 'none' : 'block');
            $('#submitBenefitRequests').css('display', lock ? 'none' : 'inline-block');

            // Update lock icon and text
            $('#lockIcon').toggleClass('fa-lock fa-unlock');
            $('#lockText').text(lock ? 'Unlock' : 'Lock');
        }


        $('#toggleLockBtn').click(function () {
            isLocked = !isLocked;
            toggleFormFields(isLocked);
        });

        // เรียกใช้เริ่มต้นเพื่อให้ฟอร์มถูกล็อค
        toggleFormFields(true);
    });

    $('#deleteBtn').click(function () {
        const benefitId = $('input[name="Id"]').val(); // ดึง ID จาก hidden input

        if (!benefitId) {
            alert('ไม่พบข้อมูลที่ต้องการลบ');
            return;
        }

        if (!confirm('คุณแน่ใจหรือไม่ว่าต้องการลบรายการนี้?')) return;

        $.ajax({
            url: '@Url.Action("Delete", "Benefit")',
            type: 'POST',
            data: {
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                id: benefitId
            },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    location.reload(); // หรือปิด modal แล้ว refresh รายการ
                } else {
                    alert("ลบไม่สำเร็จ: " + response.message);
                }
            },
            error: function () {
                alert('เกิดข้อผิดพลาดในการติดต่อเซิร์ฟเวอร์');
            }
        });
    });

    $(document).ready(function () {
        $("#editBenefitForm").submit(function (e) {
            e.preventDefault();

            var formData = new FormData(this);

        $.ajax({
            url: '@Url.Action("Edit", "Benefit")',
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: response.message,
                        showConfirmButton: false,
                        statusbar:true,
                        timer: 2000
                    }).then(() => {
                        $("#benefitRequestModal").modal("hide");
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: response.message
                    });
                }
            },
            error: function (xhr, status, error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong! ' + xhr.responseText
                });
            }
        });
        })
    })

    $('#benefitEditModal').modal('hide'); 

</script>