@model OCTWEB_NET45.Models.WSR_WorkingStandardEditModel
@{
    ViewBag.Title = "Edit Working Standard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/content/bootstrap-duallistbox.css" rel="stylesheet" />
<link href="~/content/bootstrap-duallistbox.min.css" rel="stylesheet" />
<script src="~/scripts/jquery.bootstrap-duallistbox.min.js"></script>

<div class="container-fluid">
    <div class="row">
        <a href="/WorkingStandardSet/WSSetList" class="btn-outline-secondary">Working Standart List <i class="fa fa-angle-right"></i> </a>&nbsp;
    </div>
    <div class="row">
        <div class="container">
            <div class="card shadow-lg border-0 rounded-lg mt-0 mb-3">
                <div class="card-header justify-content-center">
                    <h3 class="font-weight-bolder my-1 text-center">Edit Working Standard</h3>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "WorkingStandardSet", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "Form1", enctype = "multipart/form-data" }))
                    {
                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group">
                                    @Html.ValidationSummary(true)
                                    <p class="text-danger">@ViewBag.Message</p>
                                    @Html.HiddenFor(m => m.WS_Id, new { @class = "form-control" })
                                    <input type="hidden" name="submit_var" id="submit_var" value="">
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Working Standard No: </label>
                                    @Html.TextBoxFor(m => m.WS_Number, new { @class = "form-control form-control-sm", @readonly = "true" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.WS_Number)</p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Revision: </label>
                                    @Html.TextBoxFor(m => m.WS_Rev, new { @class = "form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.WS_Rev)</p>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Working Standard Name (English): </label>
                                    @Html.TextBoxFor(m => m.WS_Name_eng, new { @class = "form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.WS_Name_eng)</p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Working Standard Name (ภาษาไทย): </label>
                                    @Html.TextBoxFor(m => m.WS_Name_th, new { @class = "form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.WS_Name_th)</p>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Department: </label>
                                    @Html.DropDownList("searchDepartmentId", Model.SelectDepartment, "Select", new { @class = "form-control form-control-sm", style = "width:100%" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Working Standard Type: </label>
                                    @Html.DropDownList("WST_Id", Model.SelectWorkingStandardType, "Select", new { @class = "form-control form-control-sm", style = "width:100%" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.WST_Id)</p>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Working Standard Process: </label>
                                    @Html.DropDownList("WSP_Id", Model.SelectWorkingStandardProcess, "Select", new { @class = "form-control form-control-sm", style = "width:100%" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.WSP_Id)</p>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>Date Update: </label>
                                    <input type="date" name="WS_Update" class="form-control form-control-sm date" value="@Model.WS_Update.ToString("yyyy-MM-dd")" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>Working Standard File: </label>
                                    @Html.TextBoxFor(m => m.WS_File, new { @class = "form-control form-control-sm", @readonly = "true" })
                                    @Html.TextBox("file", "", new { @class = "form-control form-control-sm", type = "file" })

                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Note: </label>
                                    @Html.TextAreaFor(m => m.WS_Note, new { @class = "form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.WS_Note)</p>
                                </div>
                            </div>
                        </div>
                        <br />
                        <!--<div class="form-row justify-content-center">
            <div class="col">
                <div class="form-group">-->
                        <!--Html.CheckBoxFor(m => m.checktraining)-->
                        <!--this working standard is training course or not ? (มาตรฐานการทำงานนี้เป็นหลักสูตรการฝึกอบรมหรือไม่ ?)
                </div>
            </div>
        </div>-->

                        <style>
                            .checkbox-container {
                                display: flex;
                                flex-wrap: wrap;
                                gap: 1rem; /* กำหนดระยะห่างระหว่าง checkbox */
                            }

                            .checkbox-item {
                                flex: 1 1 30%; /* กำหนดให้แต่ละ checkbox ใช้พื้นที่ 40% ของแถว */
                            }
                        </style>

                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group" id="traininglist">

                                    <!-- Toggle All Checkbox -->
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="toggleAll" />
                                        <label class="form-check-label" for="toggleAll">Check/Uncheck All</label>

                                        <br /><br />

                                        <div class="checkbox-container">
                                            @foreach (var item in Model.SelectWSTrainingSection.OrderBy(x => x.Value))
                                            {
                                                <div class="checkbox-item">
                                                    <input type="checkbox" class="form-check-input" id="checkbox_@item.Value" name="selected_trainWS" value="@item.Value"
                                                           @(Model.selected_trainWS != null && Model.selected_trainWS.Contains(item.Value) ? "checked" : "") />
                                                    <label class="form-check-label" for="checkbox_@item.Value">@item.Text</label>
                                                </div>
                                            }
                                        </div>


                                    </div>
                                    
                                    
                                </div>
                            </div>
                        </div>


                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group text-center">
                                    <button type="button" value="Edit" id="edited" class="btn btn-success">
                                        <i class="fas fa-save"></i> Save
                                    </button>
                                    &nbsp;
                                    <button type="button" onclick="history.back()" name="Cancel" class="btn btn-outline-primary">
                                        <i class="fas fa-ban"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<script language="javaScript">

    // Function for Check All and Uncheck All
    document.addEventListener('DOMContentLoaded', function () {
        const toggleAll = document.getElementById('toggleAll');
        let checkAll = true; // Start by checking all checkboxes

        toggleAll.addEventListener('change', function () {
            const checkboxes = document.querySelectorAll('#traininglist .form-check-input[type="checkbox"]:not(#toggleAll)');

            // Set the checked state of all checkboxes based on the current state
            checkboxes.forEach(checkbox => checkbox.checked = checkAll);

            // Toggle the state for the next time
            checkAll = !checkAll;

            // Optionally update the label text
            // toggleAll.nextElementSibling.textContent = checkAll ? 'Check All' : 'Uncheck All';
        });
    });

    $(document).on('select2:open', function (e) {
        const selectId = e.target.id;
        $(".select2-search__field[aria-controls='select2-" + selectId + "-results']").each(function (key, value) {
            value.focus();
        });
    });

    $(document).ready(function () {
        
        $('#selected_trainWS').bootstrapDualListbox({
            nonSelectedListLabel: 'Area List',
            selectedListLabel: 'Selected',
            moveOnSelect: true,
        });
        var customSettings = $('select[name="selected_trainWS"]').bootstrapDualListbox('getContainer');
        customSettings.find('.moveall i').removeClass().addClass('fa fa-angle-double-right').next().remove();
        customSettings.find('.removeall i').removeClass().addClass('fa fa-angle-double-left').next().remove();
    });

    $('#checktraining').click(function (event) {
        if (this.checked) {
            $("#selected_trainWS").prop("disabled", false);
        } else {
            $("#selected_trainWS").prop("disabled", true);
            $('#selected_trainWS').val('').trigger('change');
        }
    });

    $(function () {
       
        $('#searchDepartmentId').on("change", function () {
            var wstype = $('#WST_Id').val();
            var department = $('#searchDepartmentId').val();
            var obj = { department: department };
            AjaxCall('/WorkingStandardSet/GetWSTypeCreate', JSON.stringify(obj), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#WST_Id').html('');
                    var options = '';
                    options += '<option value="0">Select WS Type</option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                    }
                    $('#WST_Id').append(options);
                }
                else {
                    $('#WST_Id').html('');
                }
            }).fail(function (error) {
                //alert(error.StatusText);
                $('#WST_Id').html('');
            });

            var obj_2 = { wstype: wstype };
            AjaxCall('/WorkingStandardSet/GetWSProcessCreate', JSON.stringify(obj_2), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#WSP_Id').html('');
                    var options = '';
                    options += '<option value="0">Select WS Process</option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                    }
                    $('#WSP_Id').append(options);
                }
                else {
                    $('#WSP_Id').html('');
                }
            }).fail(function (error) {
                //alert(error.StatusText);
                $('#WSP_Id').html('');
            });
        });

        $('#WST_Id').on("change", function () {
            var wstype = $('#WST_Id').val();
            var department = $('#searchDepartmentId').val();
            var obj = { wstype: wstype };
            AjaxCall('/WorkingStandardSet/GetWSProcessCreate', JSON.stringify(obj), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#WSP_Id').html('');
                    var options = '';
                    options += '<option value="0">Select WS Process</option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                    }
                    $('#WSP_Id').append(options);
                }
                else {
                    $('#WSP_Id').html('');
                }
            }).fail(function (error) {
                //alert(error.StatusText);
                $('#WSP_Id').html('');
            });
        });
    });

    function AjaxCall(url, data, type) {
        return $.ajax({
            url: url,
            type: type ? type : 'GET',
            data: data,
            contentType: 'application/json'
        });
    }

    $("#edited").click(function () {
        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to edit this Working Standard Type?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes "
        }).then(function (result) {
            if (result.isConfirmed) {
                $.ajax({
                    url: $("#Form1").attr("action"),
                    type: "POST",
                    data: $("#Form1").serialize(),
                    success: function (response) {
                        //if (result.isConfirmed) {
                        if (response.success) {
                            Swal.fire({
                                title: "Edit",
                                text: response.message,
                                icon: "success",
                                timer: 2000,
                                showCancelButton: false,
                                showConfirmButton: false,
                                timerProgressBar: true,
                                didClose: function () {
                                    window.location.href = response.redirectUrl;
                                }
                            });
                        }
                        else {
                            Swal.fire({
                                icon: "error",
                                title: 'Error',
                                text: response.message,
                                confirmButtonColor: "#3085d6",
                            });
                        }
                    }
                });
            }
        });
    });


</script>

