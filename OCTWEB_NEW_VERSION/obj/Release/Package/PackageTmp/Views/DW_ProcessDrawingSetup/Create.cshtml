@model OCTWEB_NET45.Models.ProcessDrawingModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container-fluid">
    <div class="row">
        <a href="/DW_ProcessDrawingSetup/PDList" class="btn-outline-secondary"><i class="fa fa-angle-left"></i> Process Drawing Setup </a>&nbsp;
    </div>
    <div class="row">
        <div class="container">
            <div class="card shadow-lg border-0 rounded-lg mt-0 mb-3">
                <div class="card-header justify-content-center">
                    <h3 class="font-weight-bolder my-1 text-center">Add New Process Drawing</h3>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Create", "DW_ProcessDrawingSetup", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "Form1", enctype = "multipart/form-data" }))
                    {
                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group">
                                    @Html.ValidationSummary(true)
                                    <p class="text-danger">@ViewBag.Message</p>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Group Line Name: </label>
                                    @Html.DropDownList("groupLine_id",Model.SelectGroupLine,"", new { @class = "form-control form-control-sm",style="width:100%" })
                                    @Html.ValidationMessageFor(m => m.groupLine_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Line Name: </label>
                                    @Html.DropDownList("process_id",Model.SelectLineName,"", new { @class = "form-control form-control-sm",style="width:100%" })
                                    @Html.ValidationMessageFor(m => m.process_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Part Name: </label>
                                    @Html.DropDownList("partName_id", Model.SelectPartName, " ", new { @class = "form-control form-control-sm", style = "width:100%" })
                                    @Html.ValidationMessageFor(m => m.partName_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Drawing No.:</label>
                                    @Html.TextBoxFor(m => m.drawingNumber, new { @class = "form-control form-control-sm", maxLength = "15", data_validate = "drawingNo" })
                                    <small class="text-danger validation-message">
                                        @Html.ValidationMessageFor(m => m.drawingNumber, "", new { @class = "text-danger" })
                                    </small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Revision:</label>
                                    @Html.TextBoxFor(m => m.rev, new { @class = "form-control form-control-sm", maxLength = "2", oninput = "this.value = this.value.replace(/[^0-9]/g, '')" })
                                    <small class="text-danger validation-message">
                                        @Html.ValidationMessageFor(m => m.rev, "", new { @class = "text-danger" })
                                    </small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Model No.:</label>
                                    @Html.TextBoxFor(m => m.modelNo, new { @class = "form-control form-control-sm", data_validate = "validateInputEn" })
                                    <small class="text-danger validation-message">
                                        @Html.ValidationMessageFor(m => m.modelNo, "", new { @class = "text-danger" })
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Drawing File:</label>
                                    @Html.TextBox("file", "", new {@class="form-control form-control-sm",type="file" })
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="form-group">
                                    <label>Remark:</label>
                                    @Html.TextAreaFor(m => m.remark, new { @class = "form-control form-control-sm", data_validate = "validateInputEn" })
                                    <small class="text-danger validation-message">
                                        @Html.ValidationMessageFor(m => m.remark, "", new { @class = "text-danger" })
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group text-center">
                                    <button type="submit" value="Create" class="btn btn-primary">
                                        <i class="fas fa-save"></i> Save
                                    </button>
                                    &nbsp;
                                    <button type="button" onclick="location.href='/DW_ProcessDrawingSetup/PDList'" name="Cancel" class="btn btn-outline-primary">
                                        <i class="fas fa-ban"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<script language="JavaScript">
    $(document).on('select2:open', function (e) {
        const selectId = e.target.id;
        $(".select2-search__field[aria-controls='select2-" + selectId + "-results']").each(function (key, value) {
            value.focus();
        });
    });

    $(document).ready(function () {
        /*
        $("#groupLine_id").select2({
            placeholder: "Select",
            allowClear: true,
            width: 'resolve'
        });
        $("#process_id").select2({
            placeholder: "Select",
            allowClear: true,
            width: 'resolve'
        });
        $("#partName_id").select2({
            placeholder: "Select",
            allowClear: true,
            width: 'resolve'
        });*/
    });


    $(function () {
        /*
        AjaxCall('/DW_ProcessDrawingSetup/GetSelectGroupLine', null).done(function (response) {
            if (response.length > 0) {
                $('#groupLine_id').html('');
                var options = '';
                options += '<option value="Select">Select Group Line</option>';
                for (var i = 0; i < response.length; i++) {
                    options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                }
                $('#groupLine_id').append(options);

            }
        }).fail(function (error) {
            alert(error.StatusText);
        });
        */
        $('#groupLine_id').on("change", function () {
            var groupLine_id = $('#groupLine_id').val();
            var obj = { groupLine_id: groupLine_id };
            AjaxCall('/DW_ProcessDrawingSetup/GetSelectLineName', JSON.stringify(obj), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#process_id').html('');
                    var options = '';
                    options += '<option value="Select">Select Line Name</option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                    }
                    $('#process_id').append(options);
                }
                else {
                    $('#process_id').html('');
                }
            }).fail(function (error) {
                //alert(error.StatusText);
                $('#process_id').html('');
            });
        });
       
    });

    function AjaxCall(url, data, type) {
        return $.ajax({
            url: url,
            type: type ? type : 'GET',
            data: data,
            contentType: 'application/json'
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("input[data-validate]").forEach(input => {
            input.addEventListener("input", validateInput);
        });
    });

    const patterns = {
        level: /^[0-9\*]*$/,               // อนุญาตเฉพาะตัวเลขและ *
        drawingNo: /^[0-9\-]*$/,           // อนุญาตเฉพาะตัวเลขและ -
        revision: /^[0-9]*$/,              // อนุญาตเฉพาะตัวเลข
        validateInputEn: /^[0-9A-Za-z\-\*\(\)_\@@]+$/    // อนุญาตเฉพาะ A-Z, a-z, -, *, (, ), _
    };

    function validateInput(event) {
        let input = event.target;
        let type = input.dataset.validate;
        let pattern = patterns[type] || /.*/; // ใช้ pattern ที่กำหนด หรือทั้งหมดถ้าไม่มี
        let value = input.value;

        let invalidChars = [...value].filter(char => !pattern.test(char)); // ค้นหาตัวอักษรที่ไม่อนุญาต
        let messages = [];

        if (type === 'level') {
            if (invalidChars.length) {
                messages.push('Please input number and symbol * Only!!!');
            }
        } else if (type === 'drawingNo') {
            if (invalidChars.length) {
                messages.push('Please input number, ENG text and symbol - Only!!!');
            }
        } else if (type === 'revition') {
            if (invalidChars.length) {
                messages.push('Please input number Only!!!');
            }
        } else {
            if (invalidChars.length) {
                let uniqueInvalidChars = [...new Set(invalidChars)].join(" and ");
                messages.push(`Invalid : Cannot use characters ${uniqueInvalidChars}`);
            }
        }

        // ลบเฉพาะอักขระที่ไม่ตรงกับ pattern ออก
        let cleanedValue = [...value].filter(char => pattern.test(char)).join('');
        if (value !== cleanedValue) {
            requestAnimationFrame(() => (input.value = cleanedValue)); // อัปเดตค่า input แบบไม่หน่วง
        }

        showValidationMessage(input, messages.join(" and "));
    }

    function showValidationMessage(input, message) {
        let validationMessage = input.nextElementSibling;
        if (validationMessage) {
            validationMessage.textContent = message;
        }
    }



</script>

