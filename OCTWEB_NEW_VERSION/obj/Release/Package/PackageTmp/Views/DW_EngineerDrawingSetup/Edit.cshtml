@model OCTWEB_NET45.Models.EngineerDrawingModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <a href="/DW_EngineerDrawingSetup/EDList" class="btn-outline-secondary"> <i class="fa fa-angle-left"></i> Engineer Drawing Setup </a>
    </div>
    <div class="row">
        <div class="container">
            <div class="card shadow-lg border-0 rounded-lg mt-0 mb-3">
                <div class="card-header justify-content-center">
                    <h3 class="page-title ">Edit Engineer Drawing</h3>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "DW_EngineerDrawingSetup", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "Form1", enctype = "multipart/form-data" }))
                    {
                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group">
                                    @Html.ValidationSummary(true)
                                    <p class="text-danger">@ViewBag.Message</p>
                                    @Html.HiddenFor(m=>m.id)
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Level: </label>
                                    @Html.TextBoxFor(m => m.level, new { @class = "form-control form-control-sm",maxLength = "15", data_validate = "level" })
                                    @Html.ValidationMessageFor(m => m.level, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Drawing No.: </label>
                                    @Html.TextBoxFor(m => m.drawingNo, new { @class = "form-control form-control-sm", @readonly="true" })
                                    @Html.ValidationMessageFor(m => m.drawingNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Revision: </label>
                                    @Html.TextBoxFor(m => m.rev, new { @class = "form-control form-control-sm" ,maxLength = "2" , data_validate = "revision" })
                                    @Html.ValidationMessageFor(m => m.rev, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Model No.:</label>
                                    @Html.TextBoxFor(m => m.modelNo, new { @class = "form-control form-control-sm", oninput = "this.value=this.value.toUpperCase()", data_validate = "validateInputEn" })
                                    @Html.ValidationMessageFor(m => m.modelNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Semi Assembly No.:</label>
                                    @Html.TextBoxFor(m => m.semiAssemblyNo, new { @class = "form-control form-control-sm", oninput = "this.value=this.value.toUpperCase()" , data_validate = "validateInputEn" })
                                    @Html.ValidationMessageFor(m => m.semiAssemblyNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Customer No.:</label>
                                    @Html.TextBoxFor(m => m.customerNo, new { @class = "form-control form-control-sm", oninput = "this.value=this.value.toUpperCase()" , data_validate = "validateInputEn" })
                                    @Html.ValidationMessageFor(m => m.customerNo, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Drawing File:</label>
                                    @Html.TextBoxFor(m => m.drawing_file, new {@class="form-control form-control-sm",@readonly="true" })
                                    @Html.TextBox("drawing_file", "", new { @class = "form-control form-control-sm", type = "file" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Part List File:</label>
                                    @Html.TextBoxFor(m => m.partList_file, new {@class="form-control form-control-sm",@readonly="true" })
                                    @Html.TextBox("partList_file", "", new { @class = "form-control form-control-sm", type = "file" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Part Name:</label>
                                    @Html.DropDownList("partName_id", Model.selectPartName, "", new { @class = "form-control form-control-sm", style = "width:100%" })
                                    @Html.ValidationMessageFor(m => m.partName_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-8">
                                <div class="form-group">
                                    <label>Note:</label>
                                    @Html.TextAreaFor(m => m.note, new { @class = "form-control form-control-sm" })
                                    @Html.ValidationMessageFor(m => m.note, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Hidden:</label>
                                    @Html.CheckBoxFor(m => m._hide)
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group text-center">
                                    <button type="submit" value="Create" class="btn btn-success">
                                        <i class="fas fa-save"></i> Save
                                    </button>
                                    &nbsp;

                                    <button type="button" onclick="location.href='/DW_EngineerDrawingSetup/EDList'" name="Cancel" class="btn btn-outline-primary">
                                        <i class="fas fa-ban"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<script language="JavaScript">
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("input[data-validate]").forEach(input => {
            input.addEventListener("input", validateInput);
        });
    });

    const patterns = {
        level : /^[0-9\*]*$/,
        revision: /^[0-9]*$/,
        validateInputEn: /^[0-9A-Za-z\-\*\+\_\.\(\)\@@]+$/
    }

    function validateInput(even) {
        let input = even.target;
        let type = input.dataset.validate;
        let pattern = patterns[type] || /.*/;
        let value = input.value;

        let invalidChars = [...value].filter(char => !pattern.test(char));
        let messages = [];

        if (type === 'level') {
            if (invalidChars.length) {
                messages.push('Please input number and symbol * Only!!!');
            }
        } else if (type === 'revision') {
            if (invalidChars.length) {
                messages.push('Please input number Only!!!');
            }
        } else {
            if (invalidChars.length) {
                let uniqueInvalidChars = [...new Set(invalidChars)].join(" and ");
                messages.push(`Invalid : Cannot use characters ${uniqueInvalidChars}`);
            }
        }

        //if (invalidChars.length) {
        //    let uniqueInvalidChars = [...new Set(invalidChars)].join(" and ");
        //    messages.push(`Invalid : Cannot use characters ${uniqueInvalidChars}`);
        //}

        // ลบเฉพาะอักขระที่ไม่ตรงกับ pattern ออก
        let cleanedValue = [...value].filter(char => pattern.test(char)).join('');
        if (value !== cleanedValue) {
            requestAnimationFrame(() => (input.value = cleanedValue)); // อัปเดตค่า input แบบไม่หน่วง
        }

        showValidationMessage(input, messages.join(" and "));
        
    }

    function showValidationMessage(input, message) {
        let validationMessage = input.nextElementSibling;
        if (validationMessage) {
            validationMessage.textContent = message;
        }
    }



    $(document).on('select2:open', function (e) {
        const selectId = e.target.id;
        $(".select2-search__field[aria-controls='select2-" + selectId + "-results']").each(function (key, value) {
            value.focus();
        });
    });

    $(document).ready(function () {
        /*
        $("#partName_id").select2({
            placeholder: "Select",
            allowClear: true,
            width: 'resolve'
        });*/
    });

</script>

