@model OCTWEB_NET45.Models.EmployeeModel
@{
    ViewBag.Title = "EmpDetail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/content/bootstrap4-toggle.min.css" rel="stylesheet" />
<script src="~/scripts/bootstrap4-toggle.min.js"></script>
<style>
    /*
    .image-upload > input {
        display: none;
    }
    */
</style>


<div class="container-fluid">

    <div class="row">
        <a href="/EmployeeFormer/EmpList" class="btn-outline-secondary">Former Employee List <i class="fa fa-angle-right"></i> </a>&nbsp;
    </div>
    <br />
    @using (Html.BeginForm("EmpDetail", "EmployeeFormer", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "Form1", enctype = "multipart/form-data" }))
    {
        <div class="row">
            <div class="col">
                @Html.HiddenFor(m => m.id)
                @Html.HiddenFor(m => m.emp_profile)
                @Html.HiddenFor(m => m.rights_unlockpage)
                @Html.HiddenFor(m => m.rights_see_IDcode_PassportID_TaxID_SSO)
                @Html.HiddenFor(m => m.rights_see_birth_date)
            </div>
        </div>
        <div class="row">
            <div class="container">
                <div class="card shadow-lg border-0 rounded-lg mt-0 mb-3">
                    <div class="card-header justify-content-center">
                        <p class="text-danger">@ViewBag.ErrorMessage</p>
                        <p class="text-success">@ViewBag.Message</p>
                        <h4 class="font-weight-bolder my-1 text-center">Personal Information </h4>
                    </div>
                    <div class="card-body">
                        <div class="form-row justify-content-center">
                            <div class="col-md-4 text-right">
                                <div class="form-group">

                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group text-center">
                                    <div class="image-upload">
                                        <label for="imgfile">
                                            <img class="img-profile border-0 rounded-lg" src="@Model.emp_profile" height="100" width="100" />
                                            <!-- <br />
                                             Import Image File (.PNG)-->
                                        </label>
                                        <input id="imgfile" type="file" name="imgfile" class="form-control form-control-sm"  />
                                    </div>
                                    <!--
                                    <label>Import Image File (.PNG): </label>
                                    Html.TextBox("imgfile", "", new { class = "form-control", type = "file" })
                                        -->
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group text-right">
                             
                                    @if (Model.rights_unlockpage)
                                    {

                                        <input type="checkbox" id="controlpage" name="controlpage" checked data-toggle="toggle"
                                               data-on="<i class='fa fa-lock'></i> Lock"
                                        data-off="<i class='fa fa-unlock'></i> Unlock"
                                        onchange="updateText()">
                                        <!--
                                        <div class="custom-control custom-switch">
                                            <input type="checkbox" class="custom-control-input" id="lockSwitches" checked>
                                            <label class="custom-control-label" for="lockSwitches">lock for edit data</label>
                                        </div>
                                        -->
                                    }

                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">ID Number: </label>
                                    @Html.TextBoxFor(m => m.IDcode, new {
                                       @class = "form-control form-control-sm",
                                       maxlength = "17",
                                       onkeypress = "return IDPass(event)",
                                       placeholder = "รหัสบัตรประชาชน",
                                       oninput = "handleIDInput(this)"
                                   })
                                        <p class="text-danger">@Html.ValidationMessageFor(m => m.IDcode)</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">Passport ID: </label>
                                    @Html.TextBoxFor(m => m.PPID, new {
                                       @class = "form-control form-control-sm",
                                       maxlength = "9",
                                       oninput = "validatePassport(this)",
                                       placeholder = "พาสปอร์ต"
                                   })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.PPID)</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">Tax ID Number: </label>
                                    @Html.TextBoxFor(m => m.TaxID, new {
                                       @class = "form-control form-control-sm",
                                       maxlength = "25",
                                       placeholder = "หมายเลขผู้เสียภาษี"
                                   })
                                        <p class="text-danger">@Html.ValidationMessageFor(m => m.TaxID)</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">SSO Number: </label>
                                    @Html.TextBoxFor(m => m.SSO, new {
                                   @class = "form-control form-control-sm",
                                   placeholder = "หมายเลขประกันสังคม"
                               })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.SSO)</p>
                                </div>
                            </div>
                        </div>                                      
                        <div class="form-row justify-content-center">
                            <div class="col-md-2 ">
                                <div class="form-group">
                                    <label class="mb-1">Gender: </label>
                                    @Html.DropDownList("Gender", Model.SelectGender, new { style = "width:100%",@class="form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Gender)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Title(EN): </label>
                                    @Html.DropDownList("Title_EN", Model.SelectTitleEn, new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">First Name(EN): </label>
                                    @Html.TextBoxFor(m => m.FName_EN, new { @class = "form-control form-control-sm", Placeholder = "ชื่อ (ภาษาอังกฤษ)", oninput = "this.value = this.value.replace(/[^a-zA-Z]/g, '');", onkeyup = "this.value = this.value[0].toUpperCase() + this.value.substring(1);" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.FName_EN)</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">Last Name(EN): </label>
                                    @Html.TextBoxFor(m => m.LName_EN, new { @class = "form-control form-control-sm", Placeholder = "นามสกุล (ภาษาอังกฤษ)", oninput = "this.value = this.value.replace(/[^a-zA-Z]/g, '');", onkeyup = "this.value = this.value[0].toUpperCase() + this.value.substring(1);" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.LName_EN)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Nick Name(EN): </label>
                                    @Html.TextBoxFor(m => m.NName_EN, new { @class = "form-control form-control-sm", Placeholder = "ชื่อเล่น (ภาษาอังกฤษ)", oninput = "this.value = this.value.replace(/[^a-zA-Z]/g, '');", onkeyup = "this.value = this.value[0].toUpperCase() + this.value.substring(1);" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.NName_EN)</p>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-2">
                                <div class="form-group">

                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Title(TH): </label>
                                    @Html.DropDownList("Title_TH", Model.SelectTitleTh, new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">First Name (TH): </label>
                                    @Html.TextBoxFor(m => m.FName_TH, new { @class = "form-control form-control-sm", Placeholder = "ชื่อ (ภาษาไทย)", oninput = "this.value = this.value.replace(/[^ก-๙\\s]/g, '')" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.FName_TH)</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">Last Name(TH): </label>
                                    @Html.TextBoxFor(m => m.LName_TH, new { @class = "form-control form-control-sm", Placeholder = "นามสกุล (ภาษาไทย)", oninput = "this.value = this.value.replace(/[^ก-๙\\s]/g, '')" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.LName_TH)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Nick Name(TH): </label>
                                    @Html.TextBoxFor(m => m.NName_TH, new { @class = "form-control form-control-sm", Placeholder = "ชื่อเล่น (ภาษาไทย)", oninput = "this.value = this.value.replace(/[^ก-๙เ\\s]/g, '')" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.NName_TH)</p>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-2">
                                <div class="form-group"></div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Nationality: </label>
                                    @Html.DropDownList("Nation", Model.SelectNationality, new { style = "width:100%",@class="form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Nation)</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @{
                                         var birth_date = Model.BDate.HasValue ? Model.BDate.Value.ToString("yyyy-MM-dd") : null;
                                    }
                                    <label class="mb-1">Birth Date: </label>
                                    @if(Model.rights_see_birth_date){
                                        <input type="date" name="BDate" id="BDate" class="form-control form-control-sm date" value="@birth_date" />
                                    }else{
                                        <input type="date" name="NBDate" id="NBDate" class="form-control form-control-sm date" value="@birth_date" readonly="readonly"/>
                                    }
                                    
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="mb-1">Age: </label>
                                    <p>@Html.TextBoxFor(m => m.age_str, new { @class = "form-control form-control-sm", @readonly = true ,id = "age_str" }) </p>
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.age_str)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1" for="disable_id">Disbled: </label>
                                    @Html.CheckBoxFor(m => m.Disabled_stat, new { id = "disable_id", @class = "form-control form-control-sm", style = "width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center" id="ppd">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @{
                                        var passport_date = Model.DatePasSport.HasValue ? Model.DatePasSport.Value.ToString("yyyy-MM-dd") : null;
                                    }
                                    <label class="mb-1">Passport Date: </label>
                                    <input type="date" name="DatePasSport" id="DatePasSport" class="form-control form-control-sm date" value="@passport_date" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="mb-1">Passport Date Expired: </label>
                                    @Html.TextBoxFor(m => m.DatePasSportExpire, new { @class = "form-control form-control-sm", @readonly = true })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">

                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group">
                                    <fieldset>
                                        <legend>Address:</legend>

                                        <div class="form-row justify-content-center">
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">Building: </label>
                                                    @Html.TextBoxFor(m => m.Addr_Build, new { @class = "form-control form-control-sm" })
                                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Addr_Build)</p>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">House No: </label>
                                                    @Html.TextBoxFor(m => m.Addr_No, new { @class = "form-control form-control-sm", maxlength = "15" })
                                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Addr_No)</p>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">Sol/Alley: </label>
                                                    @Html.TextBoxFor(m => m.Addr_Alle, new { @class = "form-control form-control-sm" })
                                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Addr_Alle)</p>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label class="mb-1">Road/Street: </label>
                                                    @Html.TextBoxFor(m => m.Addr_Rd, new { @class = "form-control form-control-sm" })
                                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Addr_Rd)</p>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">Moo: </label>
                                                    @Html.TextBoxFor(m => m.Addr_Vill, new { @class = "form-control form-control-sm", maxlength = "3", oninput = "this.value = this.value.replace(/[^0-9]/g, '');" })
                                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Addr_Vill)</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-row justify-content-center">
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">Province: </label>
                                                    @Html.DropDownList("Addr_Prvnc", Model.SelectProvince, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">District: </label>
                                                    @Html.DropDownList("Addr_Dtrct", Model.SelectDistrict, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">Sub-District: </label>
                                                    @Html.DropDownList("Addr_Prsh", Model.SelectSubDistrict, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="mb-1">Post Code: </label>
                                                    @Html.TextBoxFor(m => m.Addr_Post, new { @class = "form-control form-control-sm" })
                                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Addr_Post)</p>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label class="mb-1">Address: </label>
                                                    @Html.TextAreaFor(m => m.address_str, new { @class = "form-control form-control-sm", @readonly = true })
                                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.address_str)</p>
                                                </div>
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-2">
                                <div class="form-group">
                                    <!--<label class="mb-1">Eduction: </label>
                                    Html.DropDownList("Educate", Model.SelectEducation, " ", new { style = "width:100%" })-->
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">External E-mail: </label>
                                    @Html.TextBoxFor(m => m.Ex_Email, new { @class = "form-control form-control-sm", oninput = "this.value = this.value.replace(/[^a-zA-Z@._-]/g, '');" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Ex_Email)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Mobile: </label>
                                    @Html.TextBoxFor(m => m.Mobile, new { @class = "form-control form-control-sm", onkeypress = "return IDPass(event)" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Mobile)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Telephone: </label>
                                    @Html.TextBoxFor(m => m.Tel, new {
                                       @class = "form-control form-control-sm",
                                       maxlength = "13",
                                       onkeypress = "return IDPass(event)",
                                       oninput = "handleBankInputChange(this)"
                                   })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Tel)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Bank Account: </label>
                                    @Html.TextBoxFor(m => m.Bank_Acc, new { @class = "form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.Bank_Acc)</p>
                                </div>
                            </div>
                            <div class="col-md-2 align-self-end">
                                <div class="form-group">
                                    <img src="~/static/img/bbl_logo.png" style="height:30px;" />
                                </div>
                            </div>
                        </div>             
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="container">
                <div class="card shadow-lg border-0 rounded-lg mt-0 mb-3">
                    <div class="card-header justify-content-center">
                        <h4 class="font-weight-bolder my-1 text-center">Internal Employee Information </h4>
                    </div>
                    <div class="card-body">
                        <div class="form-row justify-content-center">
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Emp ID: </label>
                                    @Html.TextBoxFor(m => m.EmpID, new {
                                       @class = "form-control form-control-sm",
                                       @id = "EmpID",
                                       maxlength = "5",
                                       oninput = "this.value = this.value.replace(/[^0-9]/g, '').replace(/^0+/, '');"
                                   })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.EmpID)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Department: </label>
                                    @Html.DropDownList("DeptDesc", Model.SelectDepartment, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Position: </label>
                                    @Html.DropDownList("Position", Model.SelectPosition, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Cost Center: </label>
                                    @Html.DropDownList("CostCenterName", Model.SelectCostCenter, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @{
                                        var start_position = Model.StartPosition.HasValue ? Model.StartPosition.Value.ToString("yyyy-MM-dd") : null;
                                    }
                                    <label class="mb-1">Start Present Position: </label>
                                    <input type="date" name="StartPosition" id="StartPosition" class="form-control form-control-sm date" value="@start_position" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @{
                                        var start_working_date = Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : null;
                                    }
                                    <label class="mb-1">Start Working Date: </label>
                                    <input type="date" name="StartDate" id="StartDate" class="form-control form-control-sm date" value="@start_working_date" />
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-2">
                                <div class="form-group">
                                    @{
                                        var pass_working_date = Model.PassDate.HasValue ? Model.PassDate.Value.ToString("yyyy-MM-dd") : null;
                                    }
                                    <label class="mb-1">Probation Pass Date: </label>
                                    <input type="date" name="PassDate" id="PassDate" class="form-control form-control-sm date" value="@pass_working_date" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="mb-1">Reasons for the job probation pass a slow: </label>
                                    @Html.TextAreaFor(m => m.ReasonPPS, new { @class = "form-control form-control-sm" })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.ReasonPPS)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Layoff Reason</label>
                                    @Html.DropDownList("LayoffReas", Model.SelectLayoffReason, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Layoff Date</label>
                                    @{
                                        var layoff_date = Model.LayoffDate.HasValue ? Model.LayoffDate.Value.ToString("yyyy-MM-dd") : null;
                                    }
                                    <input type="date" name="LayoffDate" id="LayoffDate" class="form-control form-control-sm date" value="@layoff_date" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Select Layoff Detail</label>
                                    @Html.DropDownList("LayoffType", Model.SelectLayoffType, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="form-row justify-content-center">
                            <div class="col-md-6">
                                <label class="mb-1">Layoff Detail</label>
                                @Html.TextAreaFor(m => m.LayoffDetail, new { @class = "form-control form-control-sm" })
                                <p class="text-danger">@Html.ValidationMessageFor(m => m.LayoffDetail)</p>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Working Period: </label>
                                    @Html.TextBoxFor(m => m.working_period, new { @class = "form-control form-control-sm", @readonly = true })
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.working_period)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Internal E-mail: </label>
                                    <p>@Html.TextBoxFor(m => m.In_Email, new { @class = "form-control form-control-sm", oninput = "this.value = this.value.replace(/[^a-zA-Z@._-]/g, '');" }) </p>
                                    <p class="text-danger">@Html.ValidationMessageFor(m => m.In_Email)</p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="mb-1">Employee Status: </label>
                                    @Html.DropDownList("EmpStatus", Model.SelectEmployeeStatus, " ", new { style = "width:100%",@class="form-control form-control-sm" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="container">
                <div class="card shadow-lg border-0 rounded-lg mt-0 mb-3">
                    <div class="card-header justify-content-center">
                        <h4 class="font-weight-bolder my-1 text-center">Upload Job Description File </h4>
                    </div>
                    <div class="card-body">
                        <div class="form-row justify-content-center">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Import PDF File: </label>
                                    @Html.TextBox("jobfile", "", new { @class = "form-control form-control-sm", type = "file" })

                                </div>
                            </div>
                            <div class="col-md-6 align-self-end">
                                <div class="form-group">
                                    @if (Model.rights_unlockpage)
                                    {

                                        <input type="submit" name="SaveJobFile" class="btn btn-sm btn-primary" value="Save File" />
                                    }

                                    @if (!String.IsNullOrEmpty(Model.jobdes_path))
                                    {
                                        @Html.ActionLink("View Job Description File", "DownloadFile", new { fileName = Model.jobdes_path })
                                    }


                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="container">
                <div class="card shadow-lg border-0 rounded-lg mt-0 mb-3">
                    <div class="card-header justify-content-center">
                        <h4 class="font-weight-bolder my-1 text-center">Note </h4>
                    </div>
                    <div class="card-body">
                        <div class="form-row justify-content-center">
                            <div class="col">
                                <div class="form-group">
                                    @Html.TextAreaFor(m => m.Note, new { @class = "form-control form-control-sm"  })

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form-row justify-content-center">

                    @if (Model.rights_unlockpage)
                    {
                        <button type="submit" class="btn btn-primary" value="Save">
                            <i class="fa fa-save" ></i> Save
                        </button>
                    }
                    &nbsp;
                    <button type="button" onclick="history.back()" class="btn btn-outline-primary">
                        <i class="fa fa-ban" aria-hidden="true"></i> Cancel
                    </button>
                </div>
            </div>
        </div>
    }
</div>
<script language="JavaScript">
    $(document).on('select2:open', function (e) {
        const selectId = e.target.id;
        $(".select2-search__field[aria-controls='select2-" + selectId + "-results']").each(function (key, value) {
            value.focus();
        });
    });

    function updateText() {
        if ($("#controlpage").prop("checked") == true) {
            $(':input[type="submit"]').prop('disabled', true);
            $("#imgfile").prop("disabled", true);
            $("#IDcode").attr("readonly", true);
            $("#PPID").attr("readonly", true);
            $("#TaxID").attr("readonly", true);
            $("#SSO").attr("readonly", true);
            $("#FName_EN").attr("readonly", true);
            $("#LName_EN").attr("readonly", true);
            $("#NName_EN").attr("readonly", true);
            $("#FName_TH").attr("readonly", true);
            $("#LName_TH").attr("readonly", true);
            $("#NName_TH").attr("readonly", true);
            $("#Addr_Build").attr("readonly", true);
            $("#Addr_No").attr("readonly", true);
            $("#Addr_Alle").attr("readonly", true);
            $("#Addr_Rd").attr("readonly", true);
            $("#Addr_Vill").attr("readonly", true);
            $("#Addr_Post").attr("readonly", true);
            $("#Ex_Email").attr("readonly", true);
            $("#Mobile").attr("readonly", true);
            $("#Tel").attr("readonly", true);
            $("#Bank_Acc").attr("readonly", true);
            $(".EmpID").attr("readonly", true);
            $("#ReasonPPS").attr("readonly", true);
            $("#In_Email").attr("readonly", true);
            $("#jobfile").prop("disabled", true);
            $("#Note").attr("readonly", true);
            $("#LayoffDetail").attr("readonly", true);

            $("#BDate").attr("readonly", true);
            $("#StartPosition").attr("readonly", true);
            $("#StartDate").attr("readonly", true);
            $("#PassDate").attr("readonly", true);
            $("#LayoffDate").attr("readonly", true);

            $("#Disabled_stat").attr("disabled", true);
            $("#Gender").prop("disabled", true);
            $("#Title_EN").prop("disabled", true);
            $("#Title_TH").prop("disabled", true);
            $("#Nation").prop("disabled", true);
            $("#Addr_Prvnc").prop("disabled", true);
            $("#Addr_Dtrct").prop("disabled", true);
            $("#Addr_Prsh").prop("disabled", true);
            $("#Educate").prop("disabled", true);
            $("#DeptDesc").prop("disabled", true);
            $("#Position").prop("disabled", true);
            $("#CostCenterName").prop("disabled", true);
            $("#EmpStatus").prop("disabled", true);
            $("#LayoffReas").prop("disabled", true);
            $("#LayoffType").prop("disabled", true);
        }
        else {
            $(':input[type="submit"]').prop('disabled', false);
            $("#imgfile").prop("disabled", false);
            $("#IDcode").attr("readonly", false);
            $("#PPID").attr("readonly", false);
            $("#TaxID").attr("readonly", false);
            $("#SSO").attr("readonly", false);
            $("#FName_EN").attr("readonly", false);
            $("#LName_EN").attr("readonly", false);
            $("#NName_EN").attr("readonly", false);
            $("#FName_TH").attr("readonly", false);
            $("#LName_TH").attr("readonly", false);
            $("#NName_TH").attr("readonly", false);
            $("#Addr_Build").attr("readonly", false);
            $("#Addr_No").attr("readonly", false);
            $("#Addr_Alle").attr("readonly", false);
            $("#Addr_Rd").attr("readonly", false);
            $("#Addr_Vill").attr("readonly", false);
            $("#Addr_Post").attr("readonly", false);
            $("#Ex_Email").attr("readonly", false);
            $("#Mobile").attr("readonly", false);
            $("#Tel").attr("readonly", false);
            $("#Bank_Acc").attr("readonly", false);
            $(".EmpID").attr("readonly", false);
            $("#ReasonPPS").attr("readonly", false);
            $("#In_Email").attr("readonly", false);
            $("#jobfile").prop("disabled", false);
            $("#Note").attr("readonly", false);
            $("#LayoffDetail").attr("readonly", false);

            $("#BDate").removeAttr("readonly");
            $("#StartPosition").removeAttr("readonly");
            $("#StartDate").removeAttr("readonly");
            $("#PassDate").removeAttr("readonly");
            $("#LayoffDate").removeAttr("readonly");

            $("#Disabled_stat").attr("disabled", false);
            $("#Gender").prop("disabled", false);
            $("#Title_EN").prop("disabled", false);
            $("#Title_TH").prop("disabled", false);
            $("#Nation").prop("disabled", false);
            $("#Addr_Prvnc").prop("disabled", false);
            $("#Addr_Dtrct").prop("disabled", false);
            $("#Addr_Prsh").prop("disabled", false);
            $("#Educate").prop("disabled", false);
            $("#DeptDesc").prop("disabled", false);
            $("#Position").prop("disabled", false);
            $("#CostCenterName").prop("disabled", false);
            $("#EmpStatus").prop("disabled", false);
            $("#LayoffReas").prop("disabled", false);
            $("#LayoffType").prop("disabled", false);
        }
    }

    $(document).ready(function () {
        var nation = $('#Nation').val();
        if (nation != "Thai") {
            $("#ppd").show();
        }
        else {
            $("#ppd").hide();
        }

        $(':input[type="submit"]').prop('disabled', true);
        $("#imgfile").prop("disabled", true);
        $("#IDcode").attr("readonly", true);
        $("#PPID").attr("readonly", true);
        $("#TaxID").attr("readonly", true);
        $("#SSO").attr("readonly", true);
        $("#FName_EN").attr("readonly", true);
        $("#LName_EN").attr("readonly", true);
        $("#NName_EN").attr("readonly", true);
        $("#FName_TH").attr("readonly", true);
        $("#LName_TH").attr("readonly", true);
        $("#NName_TH").attr("readonly", true);
        $("#Addr_Build").attr("readonly", true);
        $("#Addr_No").attr("readonly", true);
        $("#Addr_Alle").attr("readonly", true);
        $("#Addr_Rd").attr("readonly", true);
        $("#Addr_Vill").attr("readonly", true);
        $("#Addr_Post").attr("readonly", true);
        $("#Ex_Email").attr("readonly", true);
        $("#Mobile").attr("readonly", true);
        $("#Tel").attr("readonly", true);
        $("#Bank_Acc").attr("readonly", true);
        $("#EmpID").attr("readonly", true);
        $("#ReasonPPS").attr("readonly", true);
        $("#In_Email").attr("readonly", true);
        $("#jobfile").prop("disabled", true);
        $("#Note").attr("readonly", true);
        $("#LayoffDetail").attr("readonly", true);

        $("#BDate").attr("readonly", true);
        $("#StartPosition").attr("readonly", true);
        $("#StartDate").attr("readonly", true);
        $("#PassDate").attr("readonly", true);
        $("#LayoffDate").attr("readonly", true);

        $("#Disabled_stat").attr("disabled", true);
        $("#Gender").prop("disabled", true);
        $("#Title_EN").prop("disabled", true);
        $("#Title_TH").prop("disabled", true);
        $("#Nation").prop("disabled", true);
        $("#Addr_Prvnc").prop("disabled", true);
        $("#Addr_Dtrct").prop("disabled", true);
        $("#Addr_Prsh").prop("disabled", true);
        $("#Educate").prop("disabled", true);
        $("#DeptDesc").prop("disabled", true);
        $("#Position").prop("disabled", true);
        $("#CostCenterName").prop("disabled", true);
        $("#EmpStatus").prop("disabled", true);
        $("#LayoffReas").prop("disabled", true);
        $("#LayoffType").prop("disabled", true);
        /*
        $("#Gender").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Title_EN").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Title_TH").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Nation").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Addr_Prvnc").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Addr_Dtrct").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Addr_Prsh").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Educate").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#DeptDesc").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#Position").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#CostCenterName").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#EmpStatus").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#LayoffReas").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });
        $("#LayoffType").select2({
            placeholder: " ",
            allowClear: true,
            width: 'resolve'
        });*/
    });

    $("#DatePasSport").change(function () {
        const monthNames = ["January", "February", "March", "April", "May", "June",
                            "July", "August", "September", "October", "November", "December"
        ];
        var ppDate = document.getElementById("DatePasSport").value;
        var date_t = new Date($('#DatePasSport').val());
        var ppxDate = new Date(date_t.setMonth(date_t.getMonth() + 3));

        document.getElementById("DatePasSportExpire").value = ppxDate.getDate()
            + " " + monthNames[ppxDate.getMonth()] + " " + ppxDate.getFullYear();
    });

    $('#Nation').on("change", function () {
        var nation = $('#Nation').val();
        if (nation != "Thai") {
            $("#ppd").show();
        }
        else {
            $("#ppd").hide();
        }
    });

    $("#Gender").change(function () {
        var gender = $("#Gender").val();
        if (gender == "Male") {
            $('#Title_TH').val("นาย").trigger('change');
            $('#Title_EN').val("Mr.").trigger('change');
        }
        else {
            $('#Title_TH').val("นาง").trigger('change');
            $('#Title_EN').val("Mrs.").trigger('change');
        }
    });

    $("#BDate").change(function () {
        var ddate = $("#BDate").val();
        var today = new Date();
        var diff = today.getTime() - Date.parse(ddate);
        var years = Math.floor(diff / (1000 * 60 * 60 * 24 * 365));
        $("#age_str").val(years + " years old");
    });

    $("#StartDate").change(function () {
        var start_date = new Date($("#StartDate").val());

        var d = new Date(start_date.setMonth(start_date.getMonth() + 3));
        var month = zeroPadded(d.getMonth() + 1);
        var year = d.getFullYear();
        var day = zeroPadded(d.getDate());
        var date_str = year + "-" + month + "-" + day

        $("#PassDate").val(date_str);
    });
    function zeroPadded(val) {
        if (val >= 10)
            return val;
        else
            return '0' + val;
    }

    $(function () {
        /*
        AjaxCall('/EmployeeFormer/GetProvince', null).done(function (response) {
            if (response.length > 0) {
                $('#searchDepartmentId').html('');
                var options = '';
                options += '<option value="Select">Select Department</option>';
                for (var i = 0; i < response.length; i++) {
                    options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                }
                $('#searchDepartmentId').append(options);

            }
        }).fail(function (error) {
            alert(error.StatusText);
        });
        */
        $('#Addr_Prvnc ').on("change", function () {
            var province = $('#Addr_Prvnc ').val();
            var obj = { province: province };
            AjaxCall('/EmployeeFormer/GetDistrict', JSON.stringify(obj), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#Addr_Dtrct').html('');
                    var options = '';
                    options += '<option value="Select">Select District </option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                    }
                    $('#Addr_Dtrct').append(options);
                }
                else {
                    $('#Addr_Dtrct').html('');
                }
            }).fail(function (error) {
                //alert(error.StatusText);
                $('#Addr_Dtrct').html('');
            });
        });

        $('#Addr_Dtrct').on("change", function () {
            var district = $('#Addr_Dtrct').val();
            var province = $('#Addr_Prvnc').val();
            var obj = { district: district };
            AjaxCall('/EmployeeFormer/GetSubDistrict', JSON.stringify(obj), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#Addr_Prsh').html('');
                    var options = '';
                    options += '<option value="Select">Select Sub-District </option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i].val + '">' + response[i].label + '</option>';
                    }
                    $('#Addr_Prsh').append(options);
                }
                else {
                    $('#Addr_Prsh').html('');
                }
            }).fail(function (error) {
                //alert(error.StatusText);
                $('#Addr_Prsh').html('');
            });
        });
    });

    function AjaxCall(url, data, type) {
        return $.ajax({
            url: url,
            type: type ? type : 'GET',
            data: data,
            contentType: 'application/json'
        });
    }
    /**
 * Last Updated: 2025-02-06
 * Author: [Aekkaphap Trasri]
*/

    document.addEventListener("DOMContentLoaded", function () {
        // ---------------------------- Numeric Input Restriction -------------------------------------------
        document.addEventListener("keypress", function (evt) {
            if (evt.target.matches("input.numeric")) {
                let key = String.fromCharCode(evt.which);
                if (!/[0-9]/.test(key)) {
                    evt.preventDefault(); // Allow only numeric input
                }
            }
        });

        // ---------------------------- General Function for Formatting Input -------------------------------------------
        function formatInput(value, patternArray) {
            value = value.replace(/\D/g, ""); // Remove non-numeric characters
            let formattedValue = "";
            let index = 0;

            patternArray.forEach((length, i) => {
                if (index < value.length) {
                    if (i > 0) formattedValue += "-";
                    formattedValue += value.substring(index, index + length);
                    index += length;
                }
            });

            return formattedValue;
        }
        function handleFormattedInput(event, patternArray, linkedInput = null) {
            let inputField = event.target;
            let cursorPosition = inputField.selectionStart;
            let oldValue = inputField.value;
            let oldLength = oldValue.length;

            let rawValue = inputField.value.replace(/\D/g, "");
            let formattedValue = formatInput(rawValue, patternArray);

            inputField.value = formattedValue;
            let newLength = formattedValue.length;
            let newPosition = cursorPosition + (newLength - oldLength);
            newPosition = Math.max(0, Math.min(newPosition, formattedValue.length));
            inputField.setSelectionRange(newPosition, newPosition);

            if (linkedInput) {
                linkedInput.value = formattedValue;
            }
        }

        // ---------------------------- ID & Tax ID Formatting -------------------------------------------
        let idInput = document.querySelector("input[name='IDcode']");
        let taxInput = document.querySelector("input[name='TaxID']");
        if (idInput && taxInput) {
            idInput.addEventListener("input", (e) => handleFormattedInput(e, [1, 4, 5, 2, 1], taxInput));
            taxInput.addEventListener("input", (e) => handleFormattedInput(e, [1, 4, 5, 2, 1]));
        }

        // ---------------------------- Mobile Number Formatting ------------------------------------
        let mobileInput = document.querySelector("input[name='Mobile']");
        if (mobileInput) {
            mobileInput.addEventListener("input", (e) => handleFormattedInput(e, [3, 8]));
        }

        // ---------------------------- Bank Account Formatting --------------------------------------
        let bankInput = document.querySelector("input[name='Bank_Acc']");
        if (bankInput) {
            bankInput.addEventListener("input", (e) => handleFormattedInput(e, [3, 1, 5, 1]));
        }

        // ---------------------------- Age Calculation -------------------------------------------
        function calculateAge() {
            let birthDateInput = document.getElementById("BDate");
            let ageInput = document.getElementById("age_str");

            if (!birthDateInput || !ageInput) return;

            let birthDate = new Date(birthDateInput.value);
            let today = new Date();

            if (isNaN(birthDate)) {
                ageInput.value = "";
                return;
            }

            let age = today.getFullYear() - birthDate.getFullYear();
            let monthDiff = today.getMonth() - birthDate.getMonth();

            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }

            ageInput.value = Math.max(age, 0) + " years old";
        }
        let birthDateInput = document.getElementById("BDate");
        if (birthDateInput) {
            birthDateInput.addEventListener("change", calculateAge);
            calculateAge();
        }


        // ------------------------- Working Period Calculation ----------------------------------
        function calculateWorkingPeriod() {
            let startDateInput = document.getElementById("StartDate");
            let workingPeriodOutput = document.getElementById("working_period");

            if (!startDateInput || !workingPeriodOutput) return;

            let startDate = new Date(startDateInput.value);
            let today = new Date();

            if (isNaN(startDate)) {
                workingPeriodOutput.value = "";
                return;
            }

            // Calculate difference in days, months, and years
            let years = today.getFullYear() - startDate.getFullYear();
            let months = today.getMonth() - startDate.getMonth();
            let days = today.getDate() - startDate.getDate();

            // Adjust for negative days (borrow from previous month)
            if (days < 0) {
                let previousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Last day of previous month
                days += previousMonth.getDate();
                months--;
            }

            // Adjust for negative months (borrow from previous year)
            if (months < 0) {
                months += 12;
                years--;
            }

            // Format output
            let periodString = [];
            if (years > 0) periodString.push(`${years} year${years > 1 ? "s" : ""}`);
            if (months > 0) periodString.push(`${months} month${months > 1 ? "s" : ""}`);
            if (days > 0) periodString.push(`${days} day${days > 1 ? "s" : ""}`);

            // If no full months/years, display only days
            if (periodString.length === 0) {
                periodString.push(`${days} day${days > 1 ? "s" : ""}`);
            }

            workingPeriodOutput.value = periodString.join(" ");
        }

        let startDateInput = document.getElementById("StartDate");
        if (startDateInput) {
            startDateInput.addEventListener("change", calculateWorkingPeriod);
            calculateWorkingPeriod(); // Initial calculation if value is prefilled
        }


    });

    document.addEventListener("DOMContentLoaded", function () {
        // Passport ID validation
        let passportInput = document.querySelector("input[name='PPID']");
        if (passportInput) {
            passportInput.addEventListener("input", function () {
                let value = this.value;

                // ลบตัวเลขออกหากตัวเลขนำหน้าตัวอักษร
                value = value.replace(/^\d+/g, "");


                // อัพเดทค่าใน input
                this.value = value.toUpperCase();

                // ตรวจสอบฟอร์แมตของ Passport ID
                let regex = /^[A-Z]{1}[0-9]{6}$|^[A-Z]{2}[0-9]{6,7}$/;

                if (!regex.test(value)) {
                    if (/^[A-Z]{3,}/.test(value)) {
                        errorMessage = "ไม่สามารถใช้ตัวอักษรขึ้นต้นเกิน 2 ตัวได้";
                    } else if (/^[A-Z]{1,2}[0-9]*$/.test(value) && value.length > 9) {
                        errorMessage = "หมายเลขพาสปอร์ตต้องไม่เกิน 9 ตัวอักษร";
                    } else {
                        errorMessage = "รูปแบบพาสปอร์ตไม่ถูกต้อง (A123456, AA123456 หรือ AA1234567)";
                    }
                }

                if (!regex.test(value)) {
                    this.setCustomValidity("Invalid passport format (A123456 or AA123456 or AA1234567)");
                } else {
                    this.setCustomValidity("");
                }
            });
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        function updateAddress() {
            let addressParts = [];

            let getValue = (id) => document.querySelector(`#${id}`)?.value.trim() || "";

            let building = getValue("Addr_Build");
            let houseNo = getValue("Addr_No");
            let alley = getValue("Addr_Alle");
            let road = getValue("Addr_Rd");
            let village = getValue("Addr_Vill");
            let subDistrict = getValue("Addr_Prsh");
            let district = getValue("Addr_Dtrct");
            let province = getValue("Addr_Prvnc");
            let postCode = getValue("Addr_Post");

            if (building) addressParts.push(`อาคาร ${building}`);
            if (houseNo) addressParts.push(`เลขที่ ${houseNo}`);
            if (alley) addressParts.push(`ซ.${alley}`);
            if (road) addressParts.push(`ถ.${road}`);
            if (village) addressParts.push(`ม.${village}`);

            if (province === "กรุงเทพมหานคร") {
                if (subDistrict) addressParts.push(`แขวง${subDistrict}`);
                if (district) addressParts.push(`เขต${district}`);
            } else {
                if (subDistrict) addressParts.push(`ต.${subDistrict}`);
                if (district) addressParts.push(`อ.${district}`);
                if (province) addressParts.push(`จ.${province}`);
            }

            if (postCode) addressParts.push(postCode);

            document.querySelector("#address_str").value = addressParts.join(" ");
        }

        function fetchData(url, data, callback) {
            AjaxCall(url, JSON.stringify(data), "POST")
                .done(response => callback(response))
                .fail(() => callback([]));
        }

        $("#Addr_Prvnc").on("change", function () {
            let province = $(this).val();
            fetchData("/EmployeeMaster/GetDistrict", { province }, function (response) {
                let districtSelect = $("#Addr_Dtrct").html('<option value="">Select District</option>');
                response.forEach(item => districtSelect.append(`<option value="${item.val}">${item.label}</option>`));
                $("#Addr_Prsh").html('<option value="">Select Sub-District</option>');
                $("#Addr_Post").val(""); // Reset Post Code
                updateAddress(); // อัปเดตที่อยู่ทันที
            });
        });

        $("#Addr_Dtrct").on("change", function () {
            let district = $(this).val();
            fetchData("/EmployeeMaster/GetSubDistrict", { district }, function (response) {
                let subDistrictSelect = $("#Addr_Prsh").html('<option value="">Select Sub-District</option>');
                response.forEach(item => subDistrictSelect.append(`<option value="${item.val}">${item.label}</option>`));
                $("#Addr_Post").val(""); // Reset Post Code
                updateAddress(); // อัปเดตที่อยู่ทันที
            });
        });

        $("#Addr_Prsh").on("change", function () {
            let province = $("#Addr_Prvnc").val();
            let district = $("#Addr_Dtrct").val();
            let subdistrict = $("#Addr_Prsh").val();

            if (province && district && subdistrict) {
                fetchData("/EmployeeMaster/GetPostCode", { province, district, subdistrict }, function (response) {
                    $("#Addr_Post").val(response || "");
                    updateAddress(); // อัปเดตที่อยู่หลังจาก Post Code เปลี่ยน
                });
            }
        });

        // Attach event listeners for input fields
        [
            "Addr_Build", "Addr_No", "Addr_Alle", "Addr_Rd", "Addr_Vill",
            "Addr_Prsh", "Addr_Dtrct", "Addr_Prvnc", "Addr_Post"
        ].forEach(id => {
            let element = document.querySelector(`#${id}`);
            if (element) element.addEventListener("input", updateAddress);
        });

        // ใช้ MutationObserver เพื่อตรวจจับการเปลี่ยนค่า Post Code (จาก Ajax)
        let postCodeElement = document.querySelector("#Addr_Post");
        if (postCodeElement) {
            let observer = new MutationObserver(updateAddress);
            observer.observe(postCodeElement, { attributes: true, attributeFilter: ["value"] });
        }

        // Initial update on page load
        updateAddress();
    });

</script>
